/*
 * generated by Xtext 2.24.0
 */
grammar InternalLobsterLanguages;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package kcl.mmdd.course.languages.lobster.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package kcl.mmdd.course.languages.lobster.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import kcl.mmdd.course.languages.lobster.services.LobsterLanguagesGrammarAccess;

}

@parser::members {

 	private LobsterLanguagesGrammarAccess grammarAccess;

    public InternalLobsterLanguagesParser(TokenStream input, LobsterLanguagesGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "LobsterProgram";
   	}

   	@Override
   	protected LobsterLanguagesGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleLobsterProgram
entryRuleLobsterProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLobsterProgramRule()); }
	iv_ruleLobsterProgram=ruleLobsterProgram
	{ $current=$iv_ruleLobsterProgram.current; }
	EOF;

// Rule LobsterProgram
ruleLobsterProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getLobsterProgramAccess().getStatementsStatementParserRuleCall_0());
			}
			lv_statements_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getLobsterProgramRule());
				}
				add(
					$current,
					"statements",
					lv_statements_0_0,
					"kcl.mmdd.course.languages.lobster.LobsterLanguages.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getCreateDatabaseStatementParserRuleCall_0());
		}
		this_CreateDatabaseStatement_0=ruleCreateDatabaseStatement
		{
			$current = $this_CreateDatabaseStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getCreateTableStatementParserRuleCall_1());
		}
		this_CreateTableStatement_1=ruleCreateTableStatement
		{
			$current = $this_CreateTableStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getInsertStatementParserRuleCall_2());
		}
		this_InsertStatement_2=ruleInsertStatement
		{
			$current = $this_InsertStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getDeleteDataStatementParserRuleCall_3());
		}
		this_DeleteDataStatement_3=ruleDeleteDataStatement
		{
			$current = $this_DeleteDataStatement_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getDeleteTableStatementParserRuleCall_4());
		}
		this_DeleteTableStatement_4=ruleDeleteTableStatement
		{
			$current = $this_DeleteTableStatement_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getUpdateStatementParserRuleCall_5());
		}
		this_UpdateStatement_5=ruleUpdateStatement
		{
			$current = $this_UpdateStatement_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSelectStatementParserRuleCall_6());
		}
		this_SelectStatement_6=ruleSelectStatement
		{
			$current = $this_SelectStatement_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getVariableCharacterParserRuleCall_7());
		}
		this_VariableCharacter_7=ruleVariableCharacter
		{
			$current = $this_VariableCharacter_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVariableCharacter
entryRuleVariableCharacter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableCharacterRule()); }
	iv_ruleVariableCharacter=ruleVariableCharacter
	{ $current=$iv_ruleVariableCharacter.current; }
	EOF;

// Rule VariableCharacter
ruleVariableCharacter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableCharacterAccess().getVarKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableCharacterAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableCharacterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getVariableCharacterAccess().getEqualsSignKeyword_2());
		}
		(
			(
				lv_value_3_0=RULE_INT
				{
					newLeafNode(lv_value_3_0, grammarAccess.getVariableCharacterAccess().getValueINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableCharacterRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleCreateDatabaseStatement
entryRuleCreateDatabaseStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCreateDatabaseStatementRule()); }
	iv_ruleCreateDatabaseStatement=ruleCreateDatabaseStatement
	{ $current=$iv_ruleCreateDatabaseStatement.current; }
	EOF;

// Rule CreateDatabaseStatement
ruleCreateDatabaseStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Create'
		{
			newLeafNode(otherlv_0, grammarAccess.getCreateDatabaseStatementAccess().getCreateKeyword_0());
		}
		otherlv_1='a'
		{
			newLeafNode(otherlv_1, grammarAccess.getCreateDatabaseStatementAccess().getAKeyword_1());
		}
		otherlv_2='database'
		{
			newLeafNode(otherlv_2, grammarAccess.getCreateDatabaseStatementAccess().getDatabaseKeyword_2());
		}
		otherlv_3='named'
		{
			newLeafNode(otherlv_3, grammarAccess.getCreateDatabaseStatementAccess().getNamedKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCreateDatabaseStatementAccess().getDbnamePrimaryExpressionParserRuleCall_4_0());
				}
				lv_dbname_4_0=rulePrimaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCreateDatabaseStatementRule());
					}
					set(
						$current,
						"dbname",
						lv_dbname_4_0,
						"kcl.mmdd.course.languages.lobster.LobsterLanguages.PrimaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCreateTableStatement
entryRuleCreateTableStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCreateTableStatementRule()); }
	iv_ruleCreateTableStatement=ruleCreateTableStatement
	{ $current=$iv_ruleCreateTableStatement.current; }
	EOF;

// Rule CreateTableStatement
ruleCreateTableStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Create'
		{
			newLeafNode(otherlv_0, grammarAccess.getCreateTableStatementAccess().getCreateKeyword_0());
		}
		otherlv_1='a'
		{
			newLeafNode(otherlv_1, grammarAccess.getCreateTableStatementAccess().getAKeyword_1());
		}
		otherlv_2='table'
		{
			newLeafNode(otherlv_2, grammarAccess.getCreateTableStatementAccess().getTableKeyword_2());
		}
		otherlv_3='named'
		{
			newLeafNode(otherlv_3, grammarAccess.getCreateTableStatementAccess().getNamedKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCreateTableStatementAccess().getTbnamePrimaryExpressionParserRuleCall_4_0());
				}
				lv_tbname_4_0=rulePrimaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCreateTableStatementRule());
					}
					set(
						$current,
						"tbname",
						lv_tbname_4_0,
						"kcl.mmdd.course.languages.lobster.LobsterLanguages.PrimaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='in'
		{
			newLeafNode(otherlv_5, grammarAccess.getCreateTableStatementAccess().getInKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCreateTableStatementAccess().getDbnamePrimaryExpressionParserRuleCall_6_0());
				}
				lv_dbname_6_0=rulePrimaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCreateTableStatementRule());
					}
					set(
						$current,
						"dbname",
						lv_dbname_6_0,
						"kcl.mmdd.course.languages.lobster.LobsterLanguages.PrimaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='include'
		{
			newLeafNode(otherlv_7, grammarAccess.getCreateTableStatementAccess().getIncludeKeyword_7());
		}
		otherlv_8='{'
		{
			newLeafNode(otherlv_8, grammarAccess.getCreateTableStatementAccess().getLeftCurlyBracketKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCreateTableStatementAccess().getColumnsCreateTableColumnParserRuleCall_9_0());
				}
				lv_columns_9_0=ruleCreateTableColumn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCreateTableStatementRule());
					}
					add(
						$current,
						"columns",
						lv_columns_9_0,
						"kcl.mmdd.course.languages.lobster.LobsterLanguages.CreateTableColumn");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getCreateTableStatementAccess().getRightCurlyBracketKeyword_10());
		}
	)
;

// Entry rule entryRuleCreateTableColumn
entryRuleCreateTableColumn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCreateTableColumnRule()); }
	iv_ruleCreateTableColumn=ruleCreateTableColumn
	{ $current=$iv_ruleCreateTableColumn.current; }
	EOF;

// Rule CreateTableColumn
ruleCreateTableColumn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Column Name:'
		{
			newLeafNode(otherlv_0, grammarAccess.getCreateTableColumnAccess().getColumnNameKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCreateTableColumnAccess().getColumnNamePrimaryExpressionParserRuleCall_1_0());
				}
				lv_columnName_1_0=rulePrimaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCreateTableColumnRule());
					}
					set(
						$current,
						"columnName",
						lv_columnName_1_0,
						"kcl.mmdd.course.languages.lobster.LobsterLanguages.PrimaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='is'
		{
			newLeafNode(otherlv_2, grammarAccess.getCreateTableColumnAccess().getIsKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCreateTableColumnAccess().getDatatypeDataTypeEnumRuleCall_3_0());
				}
				lv_datatype_3_0=ruleDataType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCreateTableColumnRule());
					}
					set(
						$current,
						"datatype",
						lv_datatype_3_0,
						"kcl.mmdd.course.languages.lobster.LobsterLanguages.DataType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='type'
		{
			newLeafNode(otherlv_4, grammarAccess.getCreateTableColumnAccess().getTypeKeyword_4());
		}
		(
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getCreateTableColumnAccess().getLeftParenthesisKeyword_5_0());
			}
			otherlv_6='max'
			{
				newLeafNode(otherlv_6, grammarAccess.getCreateTableColumnAccess().getMaxKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCreateTableColumnAccess().getSizeIntLiteralParserRuleCall_5_2_0());
					}
					lv_size_7_0=ruleIntLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCreateTableColumnRule());
						}
						set(
							$current,
							"size",
							lv_size_7_0,
							"kcl.mmdd.course.languages.lobster.LobsterLanguages.IntLiteral");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_8='characters'
			{
				newLeafNode(otherlv_8, grammarAccess.getCreateTableColumnAccess().getCharactersKeyword_5_3());
			}
			otherlv_9=')'
			{
				newLeafNode(otherlv_9, grammarAccess.getCreateTableColumnAccess().getRightParenthesisKeyword_5_4());
			}
		)?
		(
			otherlv_10=','
			{
				newLeafNode(otherlv_10, grammarAccess.getCreateTableColumnAccess().getCommaKeyword_6());
			}
		)?
	)
;

// Entry rule entryRuleInsertStatement
entryRuleInsertStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInsertStatementRule()); }
	iv_ruleInsertStatement=ruleInsertStatement
	{ $current=$iv_ruleInsertStatement.current; }
	EOF;

// Rule InsertStatement
ruleInsertStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Insert'
		{
			newLeafNode(otherlv_0, grammarAccess.getInsertStatementAccess().getInsertKeyword_0());
		}
		otherlv_1='value'
		{
			newLeafNode(otherlv_1, grammarAccess.getInsertStatementAccess().getValueKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getInsertStatementAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='Column Name:'
			{
				newLeafNode(otherlv_3, grammarAccess.getInsertStatementAccess().getColumnNameKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInsertStatementAccess().getColumnPrimaryExpressionParserRuleCall_3_1_0());
					}
					lv_column_4_0=rulePrimaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInsertStatementRule());
						}
						add(
							$current,
							"column",
							lv_column_4_0,
							"kcl.mmdd.course.languages.lobster.LobsterLanguages.PrimaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5='is'
			{
				newLeafNode(otherlv_5, grammarAccess.getInsertStatementAccess().getIsKeyword_3_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInsertStatementAccess().getValuePrimaryExpressionParserRuleCall_3_3_0());
					}
					lv_value_6_0=rulePrimaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInsertStatementRule());
						}
						add(
							$current,
							"value",
							lv_value_6_0,
							"kcl.mmdd.course.languages.lobster.LobsterLanguages.PrimaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getInsertStatementAccess().getCommaKeyword_3_4());
				}
			)?
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getInsertStatementAccess().getRightCurlyBracketKeyword_4());
		}
		otherlv_9='into'
		{
			newLeafNode(otherlv_9, grammarAccess.getInsertStatementAccess().getIntoKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInsertStatementAccess().getTbnamePrimaryExpressionParserRuleCall_6_0());
				}
				lv_tbname_10_0=rulePrimaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInsertStatementRule());
					}
					set(
						$current,
						"tbname",
						lv_tbname_10_0,
						"kcl.mmdd.course.languages.lobster.LobsterLanguages.PrimaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_11='table'
		{
			newLeafNode(otherlv_11, grammarAccess.getInsertStatementAccess().getTableKeyword_7());
		}
	)
;

// Entry rule entryRuleDeleteDataStatement
entryRuleDeleteDataStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeleteDataStatementRule()); }
	iv_ruleDeleteDataStatement=ruleDeleteDataStatement
	{ $current=$iv_ruleDeleteDataStatement.current; }
	EOF;

// Rule DeleteDataStatement
ruleDeleteDataStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Delete'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeleteDataStatementAccess().getDeleteKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getDeleteDataStatementAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeleteDataStatementAccess().getConditionMoreConditionStatementParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleMoreConditionStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeleteDataStatementRule());
					}
					add(
						$current,
						"condition",
						lv_condition_2_0,
						"kcl.mmdd.course.languages.lobster.LobsterLanguages.MoreConditionStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getDeleteDataStatementAccess().getRightCurlyBracketKeyword_3());
		}
		otherlv_4='from'
		{
			newLeafNode(otherlv_4, grammarAccess.getDeleteDataStatementAccess().getFromKeyword_4());
		}
		otherlv_5='Table'
		{
			newLeafNode(otherlv_5, grammarAccess.getDeleteDataStatementAccess().getTableKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeleteDataStatementAccess().getTbnamePrimaryExpressionParserRuleCall_6_0());
				}
				lv_tbname_6_0=rulePrimaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeleteDataStatementRule());
					}
					set(
						$current,
						"tbname",
						lv_tbname_6_0,
						"kcl.mmdd.course.languages.lobster.LobsterLanguages.PrimaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMoreConditionStatement
entryRuleMoreConditionStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoreConditionStatementRule()); }
	iv_ruleMoreConditionStatement=ruleMoreConditionStatement
	{ $current=$iv_ruleMoreConditionStatement.current; }
	EOF;

// Rule MoreConditionStatement
ruleMoreConditionStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Column Name:'
		{
			newLeafNode(otherlv_0, grammarAccess.getMoreConditionStatementAccess().getColumnNameKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMoreConditionStatementAccess().getColumnPrimaryExpressionParserRuleCall_1_0());
				}
				lv_column_1_0=rulePrimaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoreConditionStatementRule());
					}
					set(
						$current,
						"column",
						lv_column_1_0,
						"kcl.mmdd.course.languages.lobster.LobsterLanguages.PrimaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='is'
		{
			newLeafNode(otherlv_2, grammarAccess.getMoreConditionStatementAccess().getIsKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMoreConditionStatementAccess().getValuePrimaryExpressionParserRuleCall_3_0());
				}
				lv_value_3_0=rulePrimaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoreConditionStatementRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"kcl.mmdd.course.languages.lobster.LobsterLanguages.PrimaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMoreConditionStatementAccess().getMoreconditionMoreConditionEnumRuleCall_4_0());
				}
				lv_morecondition_4_0=ruleMoreCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoreConditionStatementRule());
					}
					set(
						$current,
						"morecondition",
						lv_morecondition_4_0,
						"kcl.mmdd.course.languages.lobster.LobsterLanguages.MoreCondition");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDeleteTableStatement
entryRuleDeleteTableStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeleteTableStatementRule()); }
	iv_ruleDeleteTableStatement=ruleDeleteTableStatement
	{ $current=$iv_ruleDeleteTableStatement.current; }
	EOF;

// Rule DeleteTableStatement
ruleDeleteTableStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Delete All From'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeleteTableStatementAccess().getDeleteAllFromKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeleteTableStatementAccess().getTbnamePrimaryExpressionParserRuleCall_1_0());
				}
				lv_tbname_1_0=rulePrimaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeleteTableStatementRule());
					}
					set(
						$current,
						"tbname",
						lv_tbname_1_0,
						"kcl.mmdd.course.languages.lobster.LobsterLanguages.PrimaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='Table'
		{
			newLeafNode(otherlv_2, grammarAccess.getDeleteTableStatementAccess().getTableKeyword_2());
		}
	)
;

// Entry rule entryRuleUpdateStatement
entryRuleUpdateStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUpdateStatementRule()); }
	iv_ruleUpdateStatement=ruleUpdateStatement
	{ $current=$iv_ruleUpdateStatement.current; }
	EOF;

// Rule UpdateStatement
ruleUpdateStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Update'
		{
			newLeafNode(otherlv_0, grammarAccess.getUpdateStatementAccess().getUpdateKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUpdateStatementAccess().getTbnamePrimaryExpressionParserRuleCall_1_0());
				}
				lv_tbname_1_0=rulePrimaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpdateStatementRule());
					}
					set(
						$current,
						"tbname",
						lv_tbname_1_0,
						"kcl.mmdd.course.languages.lobster.LobsterLanguages.PrimaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='Table'
		{
			newLeafNode(otherlv_2, grammarAccess.getUpdateStatementAccess().getTableKeyword_2());
		}
		otherlv_3='set'
		{
			newLeafNode(otherlv_3, grammarAccess.getUpdateStatementAccess().getSetKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getUpdateStatementAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUpdateStatementAccess().getSetvalueConditionStatementParserRuleCall_5_0());
				}
				lv_setvalue_5_0=ruleConditionStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpdateStatementRule());
					}
					add(
						$current,
						"setvalue",
						lv_setvalue_5_0,
						"kcl.mmdd.course.languages.lobster.LobsterLanguages.ConditionStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getUpdateStatementAccess().getRightCurlyBracketKeyword_6());
		}
		otherlv_7='where'
		{
			newLeafNode(otherlv_7, grammarAccess.getUpdateStatementAccess().getWhereKeyword_7());
		}
		otherlv_8='{'
		{
			newLeafNode(otherlv_8, grammarAccess.getUpdateStatementAccess().getLeftCurlyBracketKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUpdateStatementAccess().getConditionConditionStatementParserRuleCall_9_0());
				}
				lv_condition_9_0=ruleConditionStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpdateStatementRule());
					}
					add(
						$current,
						"condition",
						lv_condition_9_0,
						"kcl.mmdd.course.languages.lobster.LobsterLanguages.ConditionStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getUpdateStatementAccess().getRightCurlyBracketKeyword_10());
		}
	)
;

// Entry rule entryRuleSelectStatement
entryRuleSelectStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectStatementRule()); }
	iv_ruleSelectStatement=ruleSelectStatement
	{ $current=$iv_ruleSelectStatement.current; }
	EOF;

// Rule SelectStatement
ruleSelectStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Find out'
		{
			newLeafNode(otherlv_0, grammarAccess.getSelectStatementAccess().getFindOutKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectStatementAccess().getCaculateConditionCaculateConditionEnumRuleCall_1_0_0());
					}
					lv_caculateCondition_1_0=ruleCaculateCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectStatementRule());
						}
						set(
							$current,
							"caculateCondition",
							lv_caculateCondition_1_0,
							"kcl.mmdd.course.languages.lobster.LobsterLanguages.CaculateCondition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2='of'
			{
				newLeafNode(otherlv_2, grammarAccess.getSelectStatementAccess().getOfKeyword_1_1());
			}
		)?
		otherlv_3='Column Name:'
		{
			newLeafNode(otherlv_3, grammarAccess.getSelectStatementAccess().getColumnNameKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectStatementAccess().getColumnPrimaryExpressionParserRuleCall_3_0());
				}
				lv_column_4_0=rulePrimaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectStatementRule());
					}
					set(
						$current,
						"column",
						lv_column_4_0,
						"kcl.mmdd.course.languages.lobster.LobsterLanguages.PrimaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='where'
		{
			newLeafNode(otherlv_5, grammarAccess.getSelectStatementAccess().getWhereKeyword_4());
		}
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getSelectStatementAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectStatementAccess().getConditionConditionStatementParserRuleCall_6_0());
				}
				lv_condition_7_0=ruleConditionStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectStatementRule());
					}
					add(
						$current,
						"condition",
						lv_condition_7_0,
						"kcl.mmdd.course.languages.lobster.LobsterLanguages.ConditionStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getSelectStatementAccess().getRightCurlyBracketKeyword_7());
		}
		otherlv_9='from'
		{
			newLeafNode(otherlv_9, grammarAccess.getSelectStatementAccess().getFromKeyword_8());
		}
		otherlv_10='Table'
		{
			newLeafNode(otherlv_10, grammarAccess.getSelectStatementAccess().getTableKeyword_9());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectStatementAccess().getTbnamePrimaryExpressionParserRuleCall_10_0());
				}
				lv_tbname_11_0=rulePrimaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectStatementRule());
					}
					set(
						$current,
						"tbname",
						lv_tbname_11_0,
						"kcl.mmdd.course.languages.lobster.LobsterLanguages.PrimaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_12='order by'
			{
				newLeafNode(otherlv_12, grammarAccess.getSelectStatementAccess().getOrderByKeyword_11_0());
			}
			otherlv_13='{'
			{
				newLeafNode(otherlv_13, grammarAccess.getSelectStatementAccess().getLeftCurlyBracketKeyword_11_1());
			}
			(
				otherlv_14='Column Name:'
				{
					newLeafNode(otherlv_14, grammarAccess.getSelectStatementAccess().getColumnNameKeyword_11_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSelectStatementAccess().getCondition1PrimaryExpressionParserRuleCall_11_2_1_0());
						}
						lv_condition1_15_0=rulePrimaryExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSelectStatementRule());
							}
							add(
								$current,
								"condition1",
								lv_condition1_15_0,
								"kcl.mmdd.course.languages.lobster.LobsterLanguages.PrimaryExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)*
				(
					otherlv_16=','
					{
						newLeafNode(otherlv_16, grammarAccess.getSelectStatementAccess().getCommaKeyword_11_2_2());
					}
				)?
			)*
		)?
		(
			otherlv_17='sorted in'
			{
				newLeafNode(otherlv_17, grammarAccess.getSelectStatementAccess().getSortedInKeyword_12_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectStatementAccess().getOrderOrderEnumRuleCall_12_1_0());
					}
					lv_order_18_0=ruleOrder
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectStatementRule());
						}
						set(
							$current,
							"order",
							lv_order_18_0,
							"kcl.mmdd.course.languages.lobster.LobsterLanguages.Order");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_19='}'
		{
			newLeafNode(otherlv_19, grammarAccess.getSelectStatementAccess().getRightCurlyBracketKeyword_13());
		}
	)
;

// Entry rule entryRuleConditionStatement
entryRuleConditionStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionStatementRule()); }
	iv_ruleConditionStatement=ruleConditionStatement
	{ $current=$iv_ruleConditionStatement.current; }
	EOF;

// Rule ConditionStatement
ruleConditionStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Column Name:'
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionStatementAccess().getColumnNameKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionStatementAccess().getColumnPrimaryExpressionParserRuleCall_1_0());
				}
				lv_column_1_0=rulePrimaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionStatementRule());
					}
					set(
						$current,
						"column",
						lv_column_1_0,
						"kcl.mmdd.course.languages.lobster.LobsterLanguages.PrimaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='is'
		{
			newLeafNode(otherlv_2, grammarAccess.getConditionStatementAccess().getIsKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionStatementAccess().getValuePrimaryExpressionParserRuleCall_3_0());
				}
				lv_value_3_0=rulePrimaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionStatementRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"kcl.mmdd.course.languages.lobster.LobsterLanguages.PrimaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getConditionStatementAccess().getCommaKeyword_4());
			}
		)?
	)
;

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	iv_rulePrimaryExpression=rulePrimaryExpression
	{ $current=$iv_rulePrimaryExpression.current; }
	EOF;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIntLiteralParserRuleCall_0());
		}
		this_IntLiteral_0=ruleIntLiteral
		{
			$current = $this_IntLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getCharLiteralParserRuleCall_1());
		}
		this_CharLiteral_1=ruleCharLiteral
		{
			$current = $this_CharLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getVariableReferenceParserRuleCall_2());
		}
		this_VariableReference_2=ruleVariableReference
		{
			$current = $this_VariableReference_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCharLiteral
entryRuleCharLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharLiteralRule()); }
	iv_ruleCharLiteral=ruleCharLiteral
	{ $current=$iv_ruleCharLiteral.current; }
	EOF;

// Rule CharLiteral
ruleCharLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_vac_0_0=RULE_STRING
			{
				newLeafNode(lv_vac_0_0, grammarAccess.getCharLiteralAccess().getVacSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getCharLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"vac",
					lv_vac_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleIntLiteral
entryRuleIntLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntLiteralRule()); }
	iv_ruleIntLiteral=ruleIntLiteral
	{ $current=$iv_ruleIntLiteral.current; }
	EOF;

// Rule IntLiteral
ruleIntLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_val_0_0=RULE_INT
			{
				newLeafNode(lv_val_0_0, grammarAccess.getIntLiteralAccess().getValINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"val",
					lv_val_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleVariableReference
entryRuleVariableReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableReferenceRule()); }
	iv_ruleVariableReference=ruleVariableReference
	{ $current=$iv_ruleVariableReference.current; }
	EOF;

// Rule VariableReference
ruleVariableReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableReferenceRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getVariableReferenceAccess().getVarVariableCharacterCrossReference_0());
			}
		)
	)
;

// Rule DataType
ruleDataType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Integer'
			{
				$current = grammarAccess.getDataTypeAccess().getIntegerEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDataTypeAccess().getIntegerEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Character'
			{
				$current = grammarAccess.getDataTypeAccess().getCharacterEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDataTypeAccess().getCharacterEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule MoreCondition
ruleMoreCondition returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='and'
			{
				$current = grammarAccess.getMoreConditionAccess().getAndEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMoreConditionAccess().getAndEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='or'
			{
				$current = grammarAccess.getMoreConditionAccess().getOrEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMoreConditionAccess().getOrEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='finish'
			{
				$current = grammarAccess.getMoreConditionAccess().getFinishEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMoreConditionAccess().getFinishEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule CaculateCondition
ruleCaculateCondition returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='maximum'
			{
				$current = grammarAccess.getCaculateConditionAccess().getMaximumEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCaculateConditionAccess().getMaximumEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='minimum'
			{
				$current = grammarAccess.getCaculateConditionAccess().getMinimumEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCaculateConditionAccess().getMinimumEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='average'
			{
				$current = grammarAccess.getCaculateConditionAccess().getAverageEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCaculateConditionAccess().getAverageEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='count'
			{
				$current = grammarAccess.getCaculateConditionAccess().getCountEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCaculateConditionAccess().getCountEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='sum'
			{
				$current = grammarAccess.getCaculateConditionAccess().getSumEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getCaculateConditionAccess().getSumEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule Order
ruleOrder returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='ascending'
			{
				$current = grammarAccess.getOrderAccess().getAscendingEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOrderAccess().getAscendingEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='descending'
			{
				$current = grammarAccess.getOrderAccess().getDescendingEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOrderAccess().getDescendingEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
