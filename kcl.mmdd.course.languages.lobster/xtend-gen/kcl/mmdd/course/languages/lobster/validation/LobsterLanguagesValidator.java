/**
 * generated by Xtext 2.24.0
 */
package kcl.mmdd.course.languages.lobster.validation;

import kcl.mmdd.course.languages.lobster.lobsterLanguages.CreateTableColumn;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.DataType;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.LobsterLanguagesPackage;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.SelectStatement;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.VariableCharacter;
import kcl.mmdd.coursework.lobster.typing.validation.LobsterTypeSystemValidator;
import org.eclipse.xtext.validation.Check;

/**
 * This class contains custom validation rules.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class LobsterLanguagesValidator extends LobsterTypeSystemValidator {
  public static final String INVALID_VARIABLE_NAME = "kcl.mmdd.coursework.lobster.validation.INVALID_VARIABLE_NAME";
  
  public static final String INVALID_SIZE = "kcl.mmdd.coursework.lobster.validation.INVALID_SIZE";
  
  public static final String INVALID_ORDER = "kcl.mmdd.coursework.lobster.validation.INVALID_ORDER";
  
  public static final String NULL_VALUE = "kcl.mmdd.coursework.lobster.validation.NULL_VALUE";
  
  @Check
  public void CheckVariableCharacterStartWithLowercaseCharacter(final VariableCharacter vach) {
    boolean _isLowerCase = Character.isLowerCase(vach.getName().charAt(0));
    boolean _not = (!_isLowerCase);
    if (_not) {
      this.warning("Name should start with a lower-case character", vach, 
        LobsterLanguagesPackage.Literals.VARIABLE_CHARACTER__NAME, LobsterLanguagesValidator.INVALID_VARIABLE_NAME);
    }
  }
  
  @Check
  public void checkColumn(final CreateTableColumn column) {
    if (((column.getSize() != null) && (column.getDatatype() == DataType.INTEGER))) {
      this.error("Integer Data Type Cannot Have Size", column, 
        LobsterLanguagesPackage.Literals.CREATE_TABLE_COLUMN__SIZE, LobsterLanguagesValidator.INVALID_SIZE);
    }
  }
  
  @Check
  public void checkCalculation(final SelectStatement select) {
    if ((select.getCondition1().isEmpty() && (select.getOrder() != null))) {
      this.error("You Must Order By A Value", select, LobsterLanguagesPackage.Literals.SELECT_STATEMENT__ORDER, LobsterLanguagesValidator.INVALID_ORDER);
    }
  }
  
  @Check
  public void CheckVariableCharacterNull(final VariableCharacter var1) {
    boolean _equals = Integer.valueOf(var1.getValue()).equals(null);
    if (_equals) {
      this.warning("Variable Cannot be Null", var1, LobsterLanguagesPackage.Literals.VARIABLE_CHARACTER__VALUE, 
        LobsterLanguagesValidator.NULL_VALUE);
    }
  }
}
