/**
 * generated by Xtext 2.24.0
 */
package kcl.mmdd.course.languages.lobster.lobsterLanguages.impl;

import java.util.Collection;

import kcl.mmdd.course.languages.lobster.lobsterLanguages.ConditionStatement;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.LobsterLanguagesPackage;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.PrimaryExpression;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.UpdateStatement;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Update Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.impl.UpdateStatementImpl#getTbname <em>Tbname</em>}</li>
 *   <li>{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.impl.UpdateStatementImpl#getSetvalue <em>Setvalue</em>}</li>
 *   <li>{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.impl.UpdateStatementImpl#getCondition <em>Condition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UpdateStatementImpl extends StatementImpl implements UpdateStatement
{
  /**
   * The cached value of the '{@link #getTbname() <em>Tbname</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTbname()
   * @generated
   * @ordered
   */
  protected PrimaryExpression tbname;

  /**
   * The cached value of the '{@link #getSetvalue() <em>Setvalue</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSetvalue()
   * @generated
   * @ordered
   */
  protected EList<ConditionStatement> setvalue;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected EList<ConditionStatement> condition;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UpdateStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LobsterLanguagesPackage.Literals.UPDATE_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimaryExpression getTbname()
  {
    return tbname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTbname(PrimaryExpression newTbname, NotificationChain msgs)
  {
    PrimaryExpression oldTbname = tbname;
    tbname = newTbname;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LobsterLanguagesPackage.UPDATE_STATEMENT__TBNAME, oldTbname, newTbname);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTbname(PrimaryExpression newTbname)
  {
    if (newTbname != tbname)
    {
      NotificationChain msgs = null;
      if (tbname != null)
        msgs = ((InternalEObject)tbname).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LobsterLanguagesPackage.UPDATE_STATEMENT__TBNAME, null, msgs);
      if (newTbname != null)
        msgs = ((InternalEObject)newTbname).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LobsterLanguagesPackage.UPDATE_STATEMENT__TBNAME, null, msgs);
      msgs = basicSetTbname(newTbname, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LobsterLanguagesPackage.UPDATE_STATEMENT__TBNAME, newTbname, newTbname));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConditionStatement> getSetvalue()
  {
    if (setvalue == null)
    {
      setvalue = new EObjectContainmentEList<ConditionStatement>(ConditionStatement.class, this, LobsterLanguagesPackage.UPDATE_STATEMENT__SETVALUE);
    }
    return setvalue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConditionStatement> getCondition()
  {
    if (condition == null)
    {
      condition = new EObjectContainmentEList<ConditionStatement>(ConditionStatement.class, this, LobsterLanguagesPackage.UPDATE_STATEMENT__CONDITION);
    }
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LobsterLanguagesPackage.UPDATE_STATEMENT__TBNAME:
        return basicSetTbname(null, msgs);
      case LobsterLanguagesPackage.UPDATE_STATEMENT__SETVALUE:
        return ((InternalEList<?>)getSetvalue()).basicRemove(otherEnd, msgs);
      case LobsterLanguagesPackage.UPDATE_STATEMENT__CONDITION:
        return ((InternalEList<?>)getCondition()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LobsterLanguagesPackage.UPDATE_STATEMENT__TBNAME:
        return getTbname();
      case LobsterLanguagesPackage.UPDATE_STATEMENT__SETVALUE:
        return getSetvalue();
      case LobsterLanguagesPackage.UPDATE_STATEMENT__CONDITION:
        return getCondition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LobsterLanguagesPackage.UPDATE_STATEMENT__TBNAME:
        setTbname((PrimaryExpression)newValue);
        return;
      case LobsterLanguagesPackage.UPDATE_STATEMENT__SETVALUE:
        getSetvalue().clear();
        getSetvalue().addAll((Collection<? extends ConditionStatement>)newValue);
        return;
      case LobsterLanguagesPackage.UPDATE_STATEMENT__CONDITION:
        getCondition().clear();
        getCondition().addAll((Collection<? extends ConditionStatement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LobsterLanguagesPackage.UPDATE_STATEMENT__TBNAME:
        setTbname((PrimaryExpression)null);
        return;
      case LobsterLanguagesPackage.UPDATE_STATEMENT__SETVALUE:
        getSetvalue().clear();
        return;
      case LobsterLanguagesPackage.UPDATE_STATEMENT__CONDITION:
        getCondition().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LobsterLanguagesPackage.UPDATE_STATEMENT__TBNAME:
        return tbname != null;
      case LobsterLanguagesPackage.UPDATE_STATEMENT__SETVALUE:
        return setvalue != null && !setvalue.isEmpty();
      case LobsterLanguagesPackage.UPDATE_STATEMENT__CONDITION:
        return condition != null && !condition.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //UpdateStatementImpl
