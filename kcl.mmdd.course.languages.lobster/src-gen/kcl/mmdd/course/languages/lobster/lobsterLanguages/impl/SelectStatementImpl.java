/**
 * generated by Xtext 2.24.0
 */
package kcl.mmdd.course.languages.lobster.lobsterLanguages.impl;

import java.util.Collection;

import kcl.mmdd.course.languages.lobster.lobsterLanguages.CaculateCondition;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.ConditionStatement;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.LobsterLanguagesPackage;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.Order;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.PrimaryExpression;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.SelectStatement;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Select Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.impl.SelectStatementImpl#getCaculateCondition <em>Caculate Condition</em>}</li>
 *   <li>{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.impl.SelectStatementImpl#getColumn <em>Column</em>}</li>
 *   <li>{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.impl.SelectStatementImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.impl.SelectStatementImpl#getTbname <em>Tbname</em>}</li>
 *   <li>{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.impl.SelectStatementImpl#getCondition1 <em>Condition1</em>}</li>
 *   <li>{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.impl.SelectStatementImpl#getOrder <em>Order</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SelectStatementImpl extends StatementImpl implements SelectStatement
{
  /**
   * The default value of the '{@link #getCaculateCondition() <em>Caculate Condition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCaculateCondition()
   * @generated
   * @ordered
   */
  protected static final CaculateCondition CACULATE_CONDITION_EDEFAULT = CaculateCondition.MAXIMUM;

  /**
   * The cached value of the '{@link #getCaculateCondition() <em>Caculate Condition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCaculateCondition()
   * @generated
   * @ordered
   */
  protected CaculateCondition caculateCondition = CACULATE_CONDITION_EDEFAULT;

  /**
   * The cached value of the '{@link #getColumn() <em>Column</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColumn()
   * @generated
   * @ordered
   */
  protected PrimaryExpression column;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected EList<ConditionStatement> condition;

  /**
   * The cached value of the '{@link #getTbname() <em>Tbname</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTbname()
   * @generated
   * @ordered
   */
  protected PrimaryExpression tbname;

  /**
   * The cached value of the '{@link #getCondition1() <em>Condition1</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition1()
   * @generated
   * @ordered
   */
  protected EList<PrimaryExpression> condition1;

  /**
   * The default value of the '{@link #getOrder() <em>Order</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrder()
   * @generated
   * @ordered
   */
  protected static final Order ORDER_EDEFAULT = Order.ASCENDING;

  /**
   * The cached value of the '{@link #getOrder() <em>Order</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrder()
   * @generated
   * @ordered
   */
  protected Order order = ORDER_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SelectStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LobsterLanguagesPackage.Literals.SELECT_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CaculateCondition getCaculateCondition()
  {
    return caculateCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCaculateCondition(CaculateCondition newCaculateCondition)
  {
    CaculateCondition oldCaculateCondition = caculateCondition;
    caculateCondition = newCaculateCondition == null ? CACULATE_CONDITION_EDEFAULT : newCaculateCondition;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LobsterLanguagesPackage.SELECT_STATEMENT__CACULATE_CONDITION, oldCaculateCondition, caculateCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimaryExpression getColumn()
  {
    return column;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetColumn(PrimaryExpression newColumn, NotificationChain msgs)
  {
    PrimaryExpression oldColumn = column;
    column = newColumn;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LobsterLanguagesPackage.SELECT_STATEMENT__COLUMN, oldColumn, newColumn);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setColumn(PrimaryExpression newColumn)
  {
    if (newColumn != column)
    {
      NotificationChain msgs = null;
      if (column != null)
        msgs = ((InternalEObject)column).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LobsterLanguagesPackage.SELECT_STATEMENT__COLUMN, null, msgs);
      if (newColumn != null)
        msgs = ((InternalEObject)newColumn).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LobsterLanguagesPackage.SELECT_STATEMENT__COLUMN, null, msgs);
      msgs = basicSetColumn(newColumn, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LobsterLanguagesPackage.SELECT_STATEMENT__COLUMN, newColumn, newColumn));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConditionStatement> getCondition()
  {
    if (condition == null)
    {
      condition = new EObjectContainmentEList<ConditionStatement>(ConditionStatement.class, this, LobsterLanguagesPackage.SELECT_STATEMENT__CONDITION);
    }
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimaryExpression getTbname()
  {
    return tbname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTbname(PrimaryExpression newTbname, NotificationChain msgs)
  {
    PrimaryExpression oldTbname = tbname;
    tbname = newTbname;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LobsterLanguagesPackage.SELECT_STATEMENT__TBNAME, oldTbname, newTbname);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTbname(PrimaryExpression newTbname)
  {
    if (newTbname != tbname)
    {
      NotificationChain msgs = null;
      if (tbname != null)
        msgs = ((InternalEObject)tbname).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LobsterLanguagesPackage.SELECT_STATEMENT__TBNAME, null, msgs);
      if (newTbname != null)
        msgs = ((InternalEObject)newTbname).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LobsterLanguagesPackage.SELECT_STATEMENT__TBNAME, null, msgs);
      msgs = basicSetTbname(newTbname, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LobsterLanguagesPackage.SELECT_STATEMENT__TBNAME, newTbname, newTbname));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<PrimaryExpression> getCondition1()
  {
    if (condition1 == null)
    {
      condition1 = new EObjectContainmentEList<PrimaryExpression>(PrimaryExpression.class, this, LobsterLanguagesPackage.SELECT_STATEMENT__CONDITION1);
    }
    return condition1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Order getOrder()
  {
    return order;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOrder(Order newOrder)
  {
    Order oldOrder = order;
    order = newOrder == null ? ORDER_EDEFAULT : newOrder;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LobsterLanguagesPackage.SELECT_STATEMENT__ORDER, oldOrder, order));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LobsterLanguagesPackage.SELECT_STATEMENT__COLUMN:
        return basicSetColumn(null, msgs);
      case LobsterLanguagesPackage.SELECT_STATEMENT__CONDITION:
        return ((InternalEList<?>)getCondition()).basicRemove(otherEnd, msgs);
      case LobsterLanguagesPackage.SELECT_STATEMENT__TBNAME:
        return basicSetTbname(null, msgs);
      case LobsterLanguagesPackage.SELECT_STATEMENT__CONDITION1:
        return ((InternalEList<?>)getCondition1()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LobsterLanguagesPackage.SELECT_STATEMENT__CACULATE_CONDITION:
        return getCaculateCondition();
      case LobsterLanguagesPackage.SELECT_STATEMENT__COLUMN:
        return getColumn();
      case LobsterLanguagesPackage.SELECT_STATEMENT__CONDITION:
        return getCondition();
      case LobsterLanguagesPackage.SELECT_STATEMENT__TBNAME:
        return getTbname();
      case LobsterLanguagesPackage.SELECT_STATEMENT__CONDITION1:
        return getCondition1();
      case LobsterLanguagesPackage.SELECT_STATEMENT__ORDER:
        return getOrder();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LobsterLanguagesPackage.SELECT_STATEMENT__CACULATE_CONDITION:
        setCaculateCondition((CaculateCondition)newValue);
        return;
      case LobsterLanguagesPackage.SELECT_STATEMENT__COLUMN:
        setColumn((PrimaryExpression)newValue);
        return;
      case LobsterLanguagesPackage.SELECT_STATEMENT__CONDITION:
        getCondition().clear();
        getCondition().addAll((Collection<? extends ConditionStatement>)newValue);
        return;
      case LobsterLanguagesPackage.SELECT_STATEMENT__TBNAME:
        setTbname((PrimaryExpression)newValue);
        return;
      case LobsterLanguagesPackage.SELECT_STATEMENT__CONDITION1:
        getCondition1().clear();
        getCondition1().addAll((Collection<? extends PrimaryExpression>)newValue);
        return;
      case LobsterLanguagesPackage.SELECT_STATEMENT__ORDER:
        setOrder((Order)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LobsterLanguagesPackage.SELECT_STATEMENT__CACULATE_CONDITION:
        setCaculateCondition(CACULATE_CONDITION_EDEFAULT);
        return;
      case LobsterLanguagesPackage.SELECT_STATEMENT__COLUMN:
        setColumn((PrimaryExpression)null);
        return;
      case LobsterLanguagesPackage.SELECT_STATEMENT__CONDITION:
        getCondition().clear();
        return;
      case LobsterLanguagesPackage.SELECT_STATEMENT__TBNAME:
        setTbname((PrimaryExpression)null);
        return;
      case LobsterLanguagesPackage.SELECT_STATEMENT__CONDITION1:
        getCondition1().clear();
        return;
      case LobsterLanguagesPackage.SELECT_STATEMENT__ORDER:
        setOrder(ORDER_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LobsterLanguagesPackage.SELECT_STATEMENT__CACULATE_CONDITION:
        return caculateCondition != CACULATE_CONDITION_EDEFAULT;
      case LobsterLanguagesPackage.SELECT_STATEMENT__COLUMN:
        return column != null;
      case LobsterLanguagesPackage.SELECT_STATEMENT__CONDITION:
        return condition != null && !condition.isEmpty();
      case LobsterLanguagesPackage.SELECT_STATEMENT__TBNAME:
        return tbname != null;
      case LobsterLanguagesPackage.SELECT_STATEMENT__CONDITION1:
        return condition1 != null && !condition1.isEmpty();
      case LobsterLanguagesPackage.SELECT_STATEMENT__ORDER:
        return order != ORDER_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (caculateCondition: ");
    result.append(caculateCondition);
    result.append(", order: ");
    result.append(order);
    result.append(')');
    return result.toString();
  }

} //SelectStatementImpl
