/**
 * generated by Xtext 2.24.0
 */
package kcl.mmdd.course.languages.lobster.lobsterLanguages.impl;

import java.util.Collection;

import kcl.mmdd.course.languages.lobster.lobsterLanguages.CreateTableColumn;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.CreateTableStatement;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.LobsterLanguagesPackage;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.PrimaryExpression;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Create Table Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.impl.CreateTableStatementImpl#getTbname <em>Tbname</em>}</li>
 *   <li>{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.impl.CreateTableStatementImpl#getDbname <em>Dbname</em>}</li>
 *   <li>{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.impl.CreateTableStatementImpl#getColumns <em>Columns</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CreateTableStatementImpl extends StatementImpl implements CreateTableStatement
{
  /**
   * The cached value of the '{@link #getTbname() <em>Tbname</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTbname()
   * @generated
   * @ordered
   */
  protected PrimaryExpression tbname;

  /**
   * The cached value of the '{@link #getDbname() <em>Dbname</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDbname()
   * @generated
   * @ordered
   */
  protected PrimaryExpression dbname;

  /**
   * The cached value of the '{@link #getColumns() <em>Columns</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColumns()
   * @generated
   * @ordered
   */
  protected EList<CreateTableColumn> columns;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CreateTableStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LobsterLanguagesPackage.Literals.CREATE_TABLE_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimaryExpression getTbname()
  {
    return tbname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTbname(PrimaryExpression newTbname, NotificationChain msgs)
  {
    PrimaryExpression oldTbname = tbname;
    tbname = newTbname;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LobsterLanguagesPackage.CREATE_TABLE_STATEMENT__TBNAME, oldTbname, newTbname);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTbname(PrimaryExpression newTbname)
  {
    if (newTbname != tbname)
    {
      NotificationChain msgs = null;
      if (tbname != null)
        msgs = ((InternalEObject)tbname).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LobsterLanguagesPackage.CREATE_TABLE_STATEMENT__TBNAME, null, msgs);
      if (newTbname != null)
        msgs = ((InternalEObject)newTbname).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LobsterLanguagesPackage.CREATE_TABLE_STATEMENT__TBNAME, null, msgs);
      msgs = basicSetTbname(newTbname, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LobsterLanguagesPackage.CREATE_TABLE_STATEMENT__TBNAME, newTbname, newTbname));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimaryExpression getDbname()
  {
    return dbname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDbname(PrimaryExpression newDbname, NotificationChain msgs)
  {
    PrimaryExpression oldDbname = dbname;
    dbname = newDbname;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LobsterLanguagesPackage.CREATE_TABLE_STATEMENT__DBNAME, oldDbname, newDbname);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDbname(PrimaryExpression newDbname)
  {
    if (newDbname != dbname)
    {
      NotificationChain msgs = null;
      if (dbname != null)
        msgs = ((InternalEObject)dbname).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LobsterLanguagesPackage.CREATE_TABLE_STATEMENT__DBNAME, null, msgs);
      if (newDbname != null)
        msgs = ((InternalEObject)newDbname).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LobsterLanguagesPackage.CREATE_TABLE_STATEMENT__DBNAME, null, msgs);
      msgs = basicSetDbname(newDbname, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LobsterLanguagesPackage.CREATE_TABLE_STATEMENT__DBNAME, newDbname, newDbname));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<CreateTableColumn> getColumns()
  {
    if (columns == null)
    {
      columns = new EObjectContainmentEList<CreateTableColumn>(CreateTableColumn.class, this, LobsterLanguagesPackage.CREATE_TABLE_STATEMENT__COLUMNS);
    }
    return columns;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LobsterLanguagesPackage.CREATE_TABLE_STATEMENT__TBNAME:
        return basicSetTbname(null, msgs);
      case LobsterLanguagesPackage.CREATE_TABLE_STATEMENT__DBNAME:
        return basicSetDbname(null, msgs);
      case LobsterLanguagesPackage.CREATE_TABLE_STATEMENT__COLUMNS:
        return ((InternalEList<?>)getColumns()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LobsterLanguagesPackage.CREATE_TABLE_STATEMENT__TBNAME:
        return getTbname();
      case LobsterLanguagesPackage.CREATE_TABLE_STATEMENT__DBNAME:
        return getDbname();
      case LobsterLanguagesPackage.CREATE_TABLE_STATEMENT__COLUMNS:
        return getColumns();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LobsterLanguagesPackage.CREATE_TABLE_STATEMENT__TBNAME:
        setTbname((PrimaryExpression)newValue);
        return;
      case LobsterLanguagesPackage.CREATE_TABLE_STATEMENT__DBNAME:
        setDbname((PrimaryExpression)newValue);
        return;
      case LobsterLanguagesPackage.CREATE_TABLE_STATEMENT__COLUMNS:
        getColumns().clear();
        getColumns().addAll((Collection<? extends CreateTableColumn>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LobsterLanguagesPackage.CREATE_TABLE_STATEMENT__TBNAME:
        setTbname((PrimaryExpression)null);
        return;
      case LobsterLanguagesPackage.CREATE_TABLE_STATEMENT__DBNAME:
        setDbname((PrimaryExpression)null);
        return;
      case LobsterLanguagesPackage.CREATE_TABLE_STATEMENT__COLUMNS:
        getColumns().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LobsterLanguagesPackage.CREATE_TABLE_STATEMENT__TBNAME:
        return tbname != null;
      case LobsterLanguagesPackage.CREATE_TABLE_STATEMENT__DBNAME:
        return dbname != null;
      case LobsterLanguagesPackage.CREATE_TABLE_STATEMENT__COLUMNS:
        return columns != null && !columns.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //CreateTableStatementImpl
