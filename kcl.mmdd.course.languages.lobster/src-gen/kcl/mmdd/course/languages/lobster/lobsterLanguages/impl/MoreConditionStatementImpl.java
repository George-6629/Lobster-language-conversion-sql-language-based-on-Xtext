/**
 * generated by Xtext 2.24.0
 */
package kcl.mmdd.course.languages.lobster.lobsterLanguages.impl;

import kcl.mmdd.course.languages.lobster.lobsterLanguages.LobsterLanguagesPackage;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.MoreCondition;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.MoreConditionStatement;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.PrimaryExpression;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>More Condition Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.impl.MoreConditionStatementImpl#getColumn <em>Column</em>}</li>
 *   <li>{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.impl.MoreConditionStatementImpl#getValue <em>Value</em>}</li>
 *   <li>{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.impl.MoreConditionStatementImpl#getMorecondition <em>Morecondition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MoreConditionStatementImpl extends MinimalEObjectImpl.Container implements MoreConditionStatement
{
  /**
   * The cached value of the '{@link #getColumn() <em>Column</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColumn()
   * @generated
   * @ordered
   */
  protected PrimaryExpression column;

  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected PrimaryExpression value;

  /**
   * The default value of the '{@link #getMorecondition() <em>Morecondition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMorecondition()
   * @generated
   * @ordered
   */
  protected static final MoreCondition MORECONDITION_EDEFAULT = MoreCondition.AND;

  /**
   * The cached value of the '{@link #getMorecondition() <em>Morecondition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMorecondition()
   * @generated
   * @ordered
   */
  protected MoreCondition morecondition = MORECONDITION_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MoreConditionStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LobsterLanguagesPackage.Literals.MORE_CONDITION_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimaryExpression getColumn()
  {
    return column;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetColumn(PrimaryExpression newColumn, NotificationChain msgs)
  {
    PrimaryExpression oldColumn = column;
    column = newColumn;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LobsterLanguagesPackage.MORE_CONDITION_STATEMENT__COLUMN, oldColumn, newColumn);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setColumn(PrimaryExpression newColumn)
  {
    if (newColumn != column)
    {
      NotificationChain msgs = null;
      if (column != null)
        msgs = ((InternalEObject)column).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LobsterLanguagesPackage.MORE_CONDITION_STATEMENT__COLUMN, null, msgs);
      if (newColumn != null)
        msgs = ((InternalEObject)newColumn).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LobsterLanguagesPackage.MORE_CONDITION_STATEMENT__COLUMN, null, msgs);
      msgs = basicSetColumn(newColumn, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LobsterLanguagesPackage.MORE_CONDITION_STATEMENT__COLUMN, newColumn, newColumn));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimaryExpression getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetValue(PrimaryExpression newValue, NotificationChain msgs)
  {
    PrimaryExpression oldValue = value;
    value = newValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LobsterLanguagesPackage.MORE_CONDITION_STATEMENT__VALUE, oldValue, newValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValue(PrimaryExpression newValue)
  {
    if (newValue != value)
    {
      NotificationChain msgs = null;
      if (value != null)
        msgs = ((InternalEObject)value).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LobsterLanguagesPackage.MORE_CONDITION_STATEMENT__VALUE, null, msgs);
      if (newValue != null)
        msgs = ((InternalEObject)newValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LobsterLanguagesPackage.MORE_CONDITION_STATEMENT__VALUE, null, msgs);
      msgs = basicSetValue(newValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LobsterLanguagesPackage.MORE_CONDITION_STATEMENT__VALUE, newValue, newValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MoreCondition getMorecondition()
  {
    return morecondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMorecondition(MoreCondition newMorecondition)
  {
    MoreCondition oldMorecondition = morecondition;
    morecondition = newMorecondition == null ? MORECONDITION_EDEFAULT : newMorecondition;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LobsterLanguagesPackage.MORE_CONDITION_STATEMENT__MORECONDITION, oldMorecondition, morecondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LobsterLanguagesPackage.MORE_CONDITION_STATEMENT__COLUMN:
        return basicSetColumn(null, msgs);
      case LobsterLanguagesPackage.MORE_CONDITION_STATEMENT__VALUE:
        return basicSetValue(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LobsterLanguagesPackage.MORE_CONDITION_STATEMENT__COLUMN:
        return getColumn();
      case LobsterLanguagesPackage.MORE_CONDITION_STATEMENT__VALUE:
        return getValue();
      case LobsterLanguagesPackage.MORE_CONDITION_STATEMENT__MORECONDITION:
        return getMorecondition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LobsterLanguagesPackage.MORE_CONDITION_STATEMENT__COLUMN:
        setColumn((PrimaryExpression)newValue);
        return;
      case LobsterLanguagesPackage.MORE_CONDITION_STATEMENT__VALUE:
        setValue((PrimaryExpression)newValue);
        return;
      case LobsterLanguagesPackage.MORE_CONDITION_STATEMENT__MORECONDITION:
        setMorecondition((MoreCondition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LobsterLanguagesPackage.MORE_CONDITION_STATEMENT__COLUMN:
        setColumn((PrimaryExpression)null);
        return;
      case LobsterLanguagesPackage.MORE_CONDITION_STATEMENT__VALUE:
        setValue((PrimaryExpression)null);
        return;
      case LobsterLanguagesPackage.MORE_CONDITION_STATEMENT__MORECONDITION:
        setMorecondition(MORECONDITION_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LobsterLanguagesPackage.MORE_CONDITION_STATEMENT__COLUMN:
        return column != null;
      case LobsterLanguagesPackage.MORE_CONDITION_STATEMENT__VALUE:
        return value != null;
      case LobsterLanguagesPackage.MORE_CONDITION_STATEMENT__MORECONDITION:
        return morecondition != MORECONDITION_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (morecondition: ");
    result.append(morecondition);
    result.append(')');
    return result.toString();
  }

} //MoreConditionStatementImpl
