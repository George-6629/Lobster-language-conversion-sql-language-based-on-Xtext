/**
 * generated by Xtext 2.24.0
 */
package kcl.mmdd.course.languages.lobster.lobsterLanguages.impl;

import kcl.mmdd.course.languages.lobster.lobsterLanguages.CaculateCondition;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.CharLiteral;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.ConditionStatement;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.CreateDatabaseStatement;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.CreateTableColumn;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.CreateTableStatement;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.DataType;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.DeleteDataStatement;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.DeleteTableStatement;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.InsertStatement;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.IntLiteral;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.LobsterLanguagesFactory;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.LobsterLanguagesPackage;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.LobsterProgram;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.MoreCondition;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.MoreConditionStatement;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.Order;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.PrimaryExpression;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.SelectStatement;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.Statement;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.UpdateStatement;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.VariableCharacter;
import kcl.mmdd.course.languages.lobster.lobsterLanguages.VariableReference;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class LobsterLanguagesPackageImpl extends EPackageImpl implements LobsterLanguagesPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass lobsterProgramEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass variableCharacterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass createDatabaseStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass createTableStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass createTableColumnEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass insertStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass deleteDataStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass moreConditionStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass deleteTableStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass updateStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass selectStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass conditionStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass primaryExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass charLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass intLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass variableReferenceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum dataTypeEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum moreConditionEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum caculateConditionEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum orderEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.LobsterLanguagesPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private LobsterLanguagesPackageImpl()
  {
    super(eNS_URI, LobsterLanguagesFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link LobsterLanguagesPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static LobsterLanguagesPackage init()
  {
    if (isInited) return (LobsterLanguagesPackage)EPackage.Registry.INSTANCE.getEPackage(LobsterLanguagesPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredLobsterLanguagesPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    LobsterLanguagesPackageImpl theLobsterLanguagesPackage = registeredLobsterLanguagesPackage instanceof LobsterLanguagesPackageImpl ? (LobsterLanguagesPackageImpl)registeredLobsterLanguagesPackage : new LobsterLanguagesPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theLobsterLanguagesPackage.createPackageContents();

    // Initialize created meta-data
    theLobsterLanguagesPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theLobsterLanguagesPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(LobsterLanguagesPackage.eNS_URI, theLobsterLanguagesPackage);
    return theLobsterLanguagesPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLobsterProgram()
  {
    return lobsterProgramEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLobsterProgram_Statements()
  {
    return (EReference)lobsterProgramEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStatement()
  {
    return statementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVariableCharacter()
  {
    return variableCharacterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVariableCharacter_Name()
  {
    return (EAttribute)variableCharacterEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVariableCharacter_Value()
  {
    return (EAttribute)variableCharacterEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCreateDatabaseStatement()
  {
    return createDatabaseStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCreateDatabaseStatement_Dbname()
  {
    return (EReference)createDatabaseStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCreateTableStatement()
  {
    return createTableStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCreateTableStatement_Tbname()
  {
    return (EReference)createTableStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCreateTableStatement_Dbname()
  {
    return (EReference)createTableStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCreateTableStatement_Columns()
  {
    return (EReference)createTableStatementEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCreateTableColumn()
  {
    return createTableColumnEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCreateTableColumn_ColumnName()
  {
    return (EReference)createTableColumnEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCreateTableColumn_Datatype()
  {
    return (EAttribute)createTableColumnEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCreateTableColumn_Size()
  {
    return (EReference)createTableColumnEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getInsertStatement()
  {
    return insertStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInsertStatement_Column()
  {
    return (EReference)insertStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInsertStatement_Value()
  {
    return (EReference)insertStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInsertStatement_Tbname()
  {
    return (EReference)insertStatementEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDeleteDataStatement()
  {
    return deleteDataStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDeleteDataStatement_Condition()
  {
    return (EReference)deleteDataStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDeleteDataStatement_Tbname()
  {
    return (EReference)deleteDataStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMoreConditionStatement()
  {
    return moreConditionStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMoreConditionStatement_Column()
  {
    return (EReference)moreConditionStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMoreConditionStatement_Value()
  {
    return (EReference)moreConditionStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMoreConditionStatement_Morecondition()
  {
    return (EAttribute)moreConditionStatementEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDeleteTableStatement()
  {
    return deleteTableStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDeleteTableStatement_Tbname()
  {
    return (EReference)deleteTableStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getUpdateStatement()
  {
    return updateStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getUpdateStatement_Tbname()
  {
    return (EReference)updateStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getUpdateStatement_Setvalue()
  {
    return (EReference)updateStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getUpdateStatement_Condition()
  {
    return (EReference)updateStatementEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSelectStatement()
  {
    return selectStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSelectStatement_CaculateCondition()
  {
    return (EAttribute)selectStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSelectStatement_Column()
  {
    return (EReference)selectStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSelectStatement_Condition()
  {
    return (EReference)selectStatementEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSelectStatement_Tbname()
  {
    return (EReference)selectStatementEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSelectStatement_Condition1()
  {
    return (EReference)selectStatementEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSelectStatement_Order()
  {
    return (EAttribute)selectStatementEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConditionStatement()
  {
    return conditionStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditionStatement_Column()
  {
    return (EReference)conditionStatementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditionStatement_Value()
  {
    return (EReference)conditionStatementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPrimaryExpression()
  {
    return primaryExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCharLiteral()
  {
    return charLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCharLiteral_Vac()
  {
    return (EAttribute)charLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIntLiteral()
  {
    return intLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getIntLiteral_Val()
  {
    return (EAttribute)intLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVariableReference()
  {
    return variableReferenceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVariableReference_Var()
  {
    return (EReference)variableReferenceEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getDataType()
  {
    return dataTypeEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getMoreCondition()
  {
    return moreConditionEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getCaculateCondition()
  {
    return caculateConditionEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getOrder()
  {
    return orderEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LobsterLanguagesFactory getLobsterLanguagesFactory()
  {
    return (LobsterLanguagesFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    lobsterProgramEClass = createEClass(LOBSTER_PROGRAM);
    createEReference(lobsterProgramEClass, LOBSTER_PROGRAM__STATEMENTS);

    statementEClass = createEClass(STATEMENT);

    variableCharacterEClass = createEClass(VARIABLE_CHARACTER);
    createEAttribute(variableCharacterEClass, VARIABLE_CHARACTER__NAME);
    createEAttribute(variableCharacterEClass, VARIABLE_CHARACTER__VALUE);

    createDatabaseStatementEClass = createEClass(CREATE_DATABASE_STATEMENT);
    createEReference(createDatabaseStatementEClass, CREATE_DATABASE_STATEMENT__DBNAME);

    createTableStatementEClass = createEClass(CREATE_TABLE_STATEMENT);
    createEReference(createTableStatementEClass, CREATE_TABLE_STATEMENT__TBNAME);
    createEReference(createTableStatementEClass, CREATE_TABLE_STATEMENT__DBNAME);
    createEReference(createTableStatementEClass, CREATE_TABLE_STATEMENT__COLUMNS);

    createTableColumnEClass = createEClass(CREATE_TABLE_COLUMN);
    createEReference(createTableColumnEClass, CREATE_TABLE_COLUMN__COLUMN_NAME);
    createEAttribute(createTableColumnEClass, CREATE_TABLE_COLUMN__DATATYPE);
    createEReference(createTableColumnEClass, CREATE_TABLE_COLUMN__SIZE);

    insertStatementEClass = createEClass(INSERT_STATEMENT);
    createEReference(insertStatementEClass, INSERT_STATEMENT__COLUMN);
    createEReference(insertStatementEClass, INSERT_STATEMENT__VALUE);
    createEReference(insertStatementEClass, INSERT_STATEMENT__TBNAME);

    deleteDataStatementEClass = createEClass(DELETE_DATA_STATEMENT);
    createEReference(deleteDataStatementEClass, DELETE_DATA_STATEMENT__CONDITION);
    createEReference(deleteDataStatementEClass, DELETE_DATA_STATEMENT__TBNAME);

    moreConditionStatementEClass = createEClass(MORE_CONDITION_STATEMENT);
    createEReference(moreConditionStatementEClass, MORE_CONDITION_STATEMENT__COLUMN);
    createEReference(moreConditionStatementEClass, MORE_CONDITION_STATEMENT__VALUE);
    createEAttribute(moreConditionStatementEClass, MORE_CONDITION_STATEMENT__MORECONDITION);

    deleteTableStatementEClass = createEClass(DELETE_TABLE_STATEMENT);
    createEReference(deleteTableStatementEClass, DELETE_TABLE_STATEMENT__TBNAME);

    updateStatementEClass = createEClass(UPDATE_STATEMENT);
    createEReference(updateStatementEClass, UPDATE_STATEMENT__TBNAME);
    createEReference(updateStatementEClass, UPDATE_STATEMENT__SETVALUE);
    createEReference(updateStatementEClass, UPDATE_STATEMENT__CONDITION);

    selectStatementEClass = createEClass(SELECT_STATEMENT);
    createEAttribute(selectStatementEClass, SELECT_STATEMENT__CACULATE_CONDITION);
    createEReference(selectStatementEClass, SELECT_STATEMENT__COLUMN);
    createEReference(selectStatementEClass, SELECT_STATEMENT__CONDITION);
    createEReference(selectStatementEClass, SELECT_STATEMENT__TBNAME);
    createEReference(selectStatementEClass, SELECT_STATEMENT__CONDITION1);
    createEAttribute(selectStatementEClass, SELECT_STATEMENT__ORDER);

    conditionStatementEClass = createEClass(CONDITION_STATEMENT);
    createEReference(conditionStatementEClass, CONDITION_STATEMENT__COLUMN);
    createEReference(conditionStatementEClass, CONDITION_STATEMENT__VALUE);

    primaryExpressionEClass = createEClass(PRIMARY_EXPRESSION);

    charLiteralEClass = createEClass(CHAR_LITERAL);
    createEAttribute(charLiteralEClass, CHAR_LITERAL__VAC);

    intLiteralEClass = createEClass(INT_LITERAL);
    createEAttribute(intLiteralEClass, INT_LITERAL__VAL);

    variableReferenceEClass = createEClass(VARIABLE_REFERENCE);
    createEReference(variableReferenceEClass, VARIABLE_REFERENCE__VAR);

    // Create enums
    dataTypeEEnum = createEEnum(DATA_TYPE);
    moreConditionEEnum = createEEnum(MORE_CONDITION);
    caculateConditionEEnum = createEEnum(CACULATE_CONDITION);
    orderEEnum = createEEnum(ORDER);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    variableCharacterEClass.getESuperTypes().add(this.getStatement());
    createDatabaseStatementEClass.getESuperTypes().add(this.getStatement());
    createTableStatementEClass.getESuperTypes().add(this.getStatement());
    insertStatementEClass.getESuperTypes().add(this.getStatement());
    deleteDataStatementEClass.getESuperTypes().add(this.getStatement());
    deleteTableStatementEClass.getESuperTypes().add(this.getStatement());
    updateStatementEClass.getESuperTypes().add(this.getStatement());
    selectStatementEClass.getESuperTypes().add(this.getStatement());
    charLiteralEClass.getESuperTypes().add(this.getPrimaryExpression());
    intLiteralEClass.getESuperTypes().add(this.getPrimaryExpression());
    variableReferenceEClass.getESuperTypes().add(this.getPrimaryExpression());

    // Initialize classes and features; add operations and parameters
    initEClass(lobsterProgramEClass, LobsterProgram.class, "LobsterProgram", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getLobsterProgram_Statements(), this.getStatement(), null, "statements", null, 0, -1, LobsterProgram.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementEClass, Statement.class, "Statement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(variableCharacterEClass, VariableCharacter.class, "VariableCharacter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVariableCharacter_Name(), ecorePackage.getEString(), "name", null, 0, 1, VariableCharacter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVariableCharacter_Value(), ecorePackage.getEInt(), "value", null, 0, 1, VariableCharacter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(createDatabaseStatementEClass, CreateDatabaseStatement.class, "CreateDatabaseStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCreateDatabaseStatement_Dbname(), this.getPrimaryExpression(), null, "dbname", null, 0, 1, CreateDatabaseStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(createTableStatementEClass, CreateTableStatement.class, "CreateTableStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCreateTableStatement_Tbname(), this.getPrimaryExpression(), null, "tbname", null, 0, 1, CreateTableStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCreateTableStatement_Dbname(), this.getPrimaryExpression(), null, "dbname", null, 0, 1, CreateTableStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCreateTableStatement_Columns(), this.getCreateTableColumn(), null, "columns", null, 0, -1, CreateTableStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(createTableColumnEClass, CreateTableColumn.class, "CreateTableColumn", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCreateTableColumn_ColumnName(), this.getPrimaryExpression(), null, "columnName", null, 0, 1, CreateTableColumn.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCreateTableColumn_Datatype(), this.getDataType(), "datatype", null, 0, 1, CreateTableColumn.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCreateTableColumn_Size(), this.getIntLiteral(), null, "size", null, 0, 1, CreateTableColumn.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(insertStatementEClass, InsertStatement.class, "InsertStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getInsertStatement_Column(), this.getPrimaryExpression(), null, "column", null, 0, -1, InsertStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getInsertStatement_Value(), this.getPrimaryExpression(), null, "value", null, 0, -1, InsertStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getInsertStatement_Tbname(), this.getPrimaryExpression(), null, "tbname", null, 0, 1, InsertStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(deleteDataStatementEClass, DeleteDataStatement.class, "DeleteDataStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDeleteDataStatement_Condition(), this.getMoreConditionStatement(), null, "condition", null, 0, -1, DeleteDataStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDeleteDataStatement_Tbname(), this.getPrimaryExpression(), null, "tbname", null, 0, 1, DeleteDataStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(moreConditionStatementEClass, MoreConditionStatement.class, "MoreConditionStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMoreConditionStatement_Column(), this.getPrimaryExpression(), null, "column", null, 0, 1, MoreConditionStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMoreConditionStatement_Value(), this.getPrimaryExpression(), null, "value", null, 0, 1, MoreConditionStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMoreConditionStatement_Morecondition(), this.getMoreCondition(), "morecondition", null, 0, 1, MoreConditionStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(deleteTableStatementEClass, DeleteTableStatement.class, "DeleteTableStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDeleteTableStatement_Tbname(), this.getPrimaryExpression(), null, "tbname", null, 0, 1, DeleteTableStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(updateStatementEClass, UpdateStatement.class, "UpdateStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getUpdateStatement_Tbname(), this.getPrimaryExpression(), null, "tbname", null, 0, 1, UpdateStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getUpdateStatement_Setvalue(), this.getConditionStatement(), null, "setvalue", null, 0, -1, UpdateStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getUpdateStatement_Condition(), this.getConditionStatement(), null, "condition", null, 0, -1, UpdateStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(selectStatementEClass, SelectStatement.class, "SelectStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSelectStatement_CaculateCondition(), this.getCaculateCondition(), "caculateCondition", null, 0, 1, SelectStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSelectStatement_Column(), this.getPrimaryExpression(), null, "column", null, 0, 1, SelectStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSelectStatement_Condition(), this.getConditionStatement(), null, "condition", null, 0, -1, SelectStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSelectStatement_Tbname(), this.getPrimaryExpression(), null, "tbname", null, 0, 1, SelectStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSelectStatement_Condition1(), this.getPrimaryExpression(), null, "condition1", null, 0, -1, SelectStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSelectStatement_Order(), this.getOrder(), "order", null, 0, 1, SelectStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(conditionStatementEClass, ConditionStatement.class, "ConditionStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getConditionStatement_Column(), this.getPrimaryExpression(), null, "column", null, 0, 1, ConditionStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConditionStatement_Value(), this.getPrimaryExpression(), null, "value", null, 0, 1, ConditionStatement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(primaryExpressionEClass, PrimaryExpression.class, "PrimaryExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(charLiteralEClass, CharLiteral.class, "CharLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCharLiteral_Vac(), ecorePackage.getEString(), "vac", null, 0, 1, CharLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(intLiteralEClass, IntLiteral.class, "IntLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getIntLiteral_Val(), ecorePackage.getEInt(), "val", null, 0, 1, IntLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(variableReferenceEClass, VariableReference.class, "VariableReference", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getVariableReference_Var(), this.getVariableCharacter(), null, "var", null, 0, 1, VariableReference.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(dataTypeEEnum, DataType.class, "DataType");
    addEEnumLiteral(dataTypeEEnum, DataType.INTEGER);
    addEEnumLiteral(dataTypeEEnum, DataType.CHARACTER);

    initEEnum(moreConditionEEnum, MoreCondition.class, "MoreCondition");
    addEEnumLiteral(moreConditionEEnum, MoreCondition.AND);
    addEEnumLiteral(moreConditionEEnum, MoreCondition.OR);
    addEEnumLiteral(moreConditionEEnum, MoreCondition.FINISH);

    initEEnum(caculateConditionEEnum, CaculateCondition.class, "CaculateCondition");
    addEEnumLiteral(caculateConditionEEnum, CaculateCondition.MAXIMUM);
    addEEnumLiteral(caculateConditionEEnum, CaculateCondition.MINIMUM);
    addEEnumLiteral(caculateConditionEEnum, CaculateCondition.AVERAGE);
    addEEnumLiteral(caculateConditionEEnum, CaculateCondition.COUNT);
    addEEnumLiteral(caculateConditionEEnum, CaculateCondition.SUM);

    initEEnum(orderEEnum, Order.class, "Order");
    addEEnumLiteral(orderEEnum, Order.ASCENDING);
    addEEnumLiteral(orderEEnum, Order.DESCENDING);

    // Create resource
    createResource(eNS_URI);
  }

} //LobsterLanguagesPackageImpl
