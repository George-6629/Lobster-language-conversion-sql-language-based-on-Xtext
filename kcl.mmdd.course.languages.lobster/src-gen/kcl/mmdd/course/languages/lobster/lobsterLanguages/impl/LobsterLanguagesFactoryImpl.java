/**
 * generated by Xtext 2.24.0
 */
package kcl.mmdd.course.languages.lobster.lobsterLanguages.impl;

import kcl.mmdd.course.languages.lobster.lobsterLanguages.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class LobsterLanguagesFactoryImpl extends EFactoryImpl implements LobsterLanguagesFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static LobsterLanguagesFactory init()
  {
    try
    {
      LobsterLanguagesFactory theLobsterLanguagesFactory = (LobsterLanguagesFactory)EPackage.Registry.INSTANCE.getEFactory(LobsterLanguagesPackage.eNS_URI);
      if (theLobsterLanguagesFactory != null)
      {
        return theLobsterLanguagesFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new LobsterLanguagesFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LobsterLanguagesFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case LobsterLanguagesPackage.LOBSTER_PROGRAM: return createLobsterProgram();
      case LobsterLanguagesPackage.STATEMENT: return createStatement();
      case LobsterLanguagesPackage.VARIABLE_CHARACTER: return createVariableCharacter();
      case LobsterLanguagesPackage.CREATE_DATABASE_STATEMENT: return createCreateDatabaseStatement();
      case LobsterLanguagesPackage.CREATE_TABLE_STATEMENT: return createCreateTableStatement();
      case LobsterLanguagesPackage.CREATE_TABLE_COLUMN: return createCreateTableColumn();
      case LobsterLanguagesPackage.INSERT_STATEMENT: return createInsertStatement();
      case LobsterLanguagesPackage.DELETE_DATA_STATEMENT: return createDeleteDataStatement();
      case LobsterLanguagesPackage.MORE_CONDITION_STATEMENT: return createMoreConditionStatement();
      case LobsterLanguagesPackage.DELETE_TABLE_STATEMENT: return createDeleteTableStatement();
      case LobsterLanguagesPackage.UPDATE_STATEMENT: return createUpdateStatement();
      case LobsterLanguagesPackage.SELECT_STATEMENT: return createSelectStatement();
      case LobsterLanguagesPackage.CONDITION_STATEMENT: return createConditionStatement();
      case LobsterLanguagesPackage.PRIMARY_EXPRESSION: return createPrimaryExpression();
      case LobsterLanguagesPackage.CHAR_LITERAL: return createCharLiteral();
      case LobsterLanguagesPackage.INT_LITERAL: return createIntLiteral();
      case LobsterLanguagesPackage.VARIABLE_REFERENCE: return createVariableReference();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case LobsterLanguagesPackage.DATA_TYPE:
        return createDataTypeFromString(eDataType, initialValue);
      case LobsterLanguagesPackage.MORE_CONDITION:
        return createMoreConditionFromString(eDataType, initialValue);
      case LobsterLanguagesPackage.CACULATE_CONDITION:
        return createCaculateConditionFromString(eDataType, initialValue);
      case LobsterLanguagesPackage.ORDER:
        return createOrderFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case LobsterLanguagesPackage.DATA_TYPE:
        return convertDataTypeToString(eDataType, instanceValue);
      case LobsterLanguagesPackage.MORE_CONDITION:
        return convertMoreConditionToString(eDataType, instanceValue);
      case LobsterLanguagesPackage.CACULATE_CONDITION:
        return convertCaculateConditionToString(eDataType, instanceValue);
      case LobsterLanguagesPackage.ORDER:
        return convertOrderToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LobsterProgram createLobsterProgram()
  {
    LobsterProgramImpl lobsterProgram = new LobsterProgramImpl();
    return lobsterProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableCharacter createVariableCharacter()
  {
    VariableCharacterImpl variableCharacter = new VariableCharacterImpl();
    return variableCharacter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CreateDatabaseStatement createCreateDatabaseStatement()
  {
    CreateDatabaseStatementImpl createDatabaseStatement = new CreateDatabaseStatementImpl();
    return createDatabaseStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CreateTableStatement createCreateTableStatement()
  {
    CreateTableStatementImpl createTableStatement = new CreateTableStatementImpl();
    return createTableStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CreateTableColumn createCreateTableColumn()
  {
    CreateTableColumnImpl createTableColumn = new CreateTableColumnImpl();
    return createTableColumn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InsertStatement createInsertStatement()
  {
    InsertStatementImpl insertStatement = new InsertStatementImpl();
    return insertStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeleteDataStatement createDeleteDataStatement()
  {
    DeleteDataStatementImpl deleteDataStatement = new DeleteDataStatementImpl();
    return deleteDataStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MoreConditionStatement createMoreConditionStatement()
  {
    MoreConditionStatementImpl moreConditionStatement = new MoreConditionStatementImpl();
    return moreConditionStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeleteTableStatement createDeleteTableStatement()
  {
    DeleteTableStatementImpl deleteTableStatement = new DeleteTableStatementImpl();
    return deleteTableStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpdateStatement createUpdateStatement()
  {
    UpdateStatementImpl updateStatement = new UpdateStatementImpl();
    return updateStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectStatement createSelectStatement()
  {
    SelectStatementImpl selectStatement = new SelectStatementImpl();
    return selectStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionStatement createConditionStatement()
  {
    ConditionStatementImpl conditionStatement = new ConditionStatementImpl();
    return conditionStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimaryExpression createPrimaryExpression()
  {
    PrimaryExpressionImpl primaryExpression = new PrimaryExpressionImpl();
    return primaryExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CharLiteral createCharLiteral()
  {
    CharLiteralImpl charLiteral = new CharLiteralImpl();
    return charLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntLiteral createIntLiteral()
  {
    IntLiteralImpl intLiteral = new IntLiteralImpl();
    return intLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableReference createVariableReference()
  {
    VariableReferenceImpl variableReference = new VariableReferenceImpl();
    return variableReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataType createDataTypeFromString(EDataType eDataType, String initialValue)
  {
    DataType result = DataType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDataTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MoreCondition createMoreConditionFromString(EDataType eDataType, String initialValue)
  {
    MoreCondition result = MoreCondition.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMoreConditionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CaculateCondition createCaculateConditionFromString(EDataType eDataType, String initialValue)
  {
    CaculateCondition result = CaculateCondition.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCaculateConditionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Order createOrderFromString(EDataType eDataType, String initialValue)
  {
    Order result = Order.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertOrderToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LobsterLanguagesPackage getLobsterLanguagesPackage()
  {
    return (LobsterLanguagesPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static LobsterLanguagesPackage getPackage()
  {
    return LobsterLanguagesPackage.eINSTANCE;
  }

} //LobsterLanguagesFactoryImpl
