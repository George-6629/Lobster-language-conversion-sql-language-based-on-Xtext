/**
 * generated by Xtext 2.24.0
 */
package kcl.mmdd.course.languages.lobster.lobsterLanguages.util;

import kcl.mmdd.course.languages.lobster.lobsterLanguages.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.LobsterLanguagesPackage
 * @generated
 */
public class LobsterLanguagesAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static LobsterLanguagesPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LobsterLanguagesAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = LobsterLanguagesPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LobsterLanguagesSwitch<Adapter> modelSwitch =
    new LobsterLanguagesSwitch<Adapter>()
    {
      @Override
      public Adapter caseLobsterProgram(LobsterProgram object)
      {
        return createLobsterProgramAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseVariableCharacter(VariableCharacter object)
      {
        return createVariableCharacterAdapter();
      }
      @Override
      public Adapter caseCreateDatabaseStatement(CreateDatabaseStatement object)
      {
        return createCreateDatabaseStatementAdapter();
      }
      @Override
      public Adapter caseCreateTableStatement(CreateTableStatement object)
      {
        return createCreateTableStatementAdapter();
      }
      @Override
      public Adapter caseCreateTableColumn(CreateTableColumn object)
      {
        return createCreateTableColumnAdapter();
      }
      @Override
      public Adapter caseInsertStatement(InsertStatement object)
      {
        return createInsertStatementAdapter();
      }
      @Override
      public Adapter caseDeleteDataStatement(DeleteDataStatement object)
      {
        return createDeleteDataStatementAdapter();
      }
      @Override
      public Adapter caseMoreConditionStatement(MoreConditionStatement object)
      {
        return createMoreConditionStatementAdapter();
      }
      @Override
      public Adapter caseDeleteTableStatement(DeleteTableStatement object)
      {
        return createDeleteTableStatementAdapter();
      }
      @Override
      public Adapter caseUpdateStatement(UpdateStatement object)
      {
        return createUpdateStatementAdapter();
      }
      @Override
      public Adapter caseSelectStatement(SelectStatement object)
      {
        return createSelectStatementAdapter();
      }
      @Override
      public Adapter caseConditionStatement(ConditionStatement object)
      {
        return createConditionStatementAdapter();
      }
      @Override
      public Adapter casePrimaryExpression(PrimaryExpression object)
      {
        return createPrimaryExpressionAdapter();
      }
      @Override
      public Adapter caseCharLiteral(CharLiteral object)
      {
        return createCharLiteralAdapter();
      }
      @Override
      public Adapter caseIntLiteral(IntLiteral object)
      {
        return createIntLiteralAdapter();
      }
      @Override
      public Adapter caseVariableReference(VariableReference object)
      {
        return createVariableReferenceAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.LobsterProgram <em>Lobster Program</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.LobsterProgram
   * @generated
   */
  public Adapter createLobsterProgramAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.VariableCharacter <em>Variable Character</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.VariableCharacter
   * @generated
   */
  public Adapter createVariableCharacterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.CreateDatabaseStatement <em>Create Database Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.CreateDatabaseStatement
   * @generated
   */
  public Adapter createCreateDatabaseStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.CreateTableStatement <em>Create Table Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.CreateTableStatement
   * @generated
   */
  public Adapter createCreateTableStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.CreateTableColumn <em>Create Table Column</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.CreateTableColumn
   * @generated
   */
  public Adapter createCreateTableColumnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.InsertStatement <em>Insert Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.InsertStatement
   * @generated
   */
  public Adapter createInsertStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.DeleteDataStatement <em>Delete Data Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.DeleteDataStatement
   * @generated
   */
  public Adapter createDeleteDataStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.MoreConditionStatement <em>More Condition Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.MoreConditionStatement
   * @generated
   */
  public Adapter createMoreConditionStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.DeleteTableStatement <em>Delete Table Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.DeleteTableStatement
   * @generated
   */
  public Adapter createDeleteTableStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.UpdateStatement <em>Update Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.UpdateStatement
   * @generated
   */
  public Adapter createUpdateStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.SelectStatement <em>Select Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.SelectStatement
   * @generated
   */
  public Adapter createSelectStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.ConditionStatement <em>Condition Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.ConditionStatement
   * @generated
   */
  public Adapter createConditionStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.PrimaryExpression <em>Primary Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.PrimaryExpression
   * @generated
   */
  public Adapter createPrimaryExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.CharLiteral <em>Char Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.CharLiteral
   * @generated
   */
  public Adapter createCharLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.IntLiteral <em>Int Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.IntLiteral
   * @generated
   */
  public Adapter createIntLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.VariableReference <em>Variable Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.VariableReference
   * @generated
   */
  public Adapter createVariableReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //LobsterLanguagesAdapterFactory
