/**
 * generated by Xtext 2.24.0
 */
package kcl.mmdd.course.languages.lobster.lobsterLanguages;

import org.eclipse.emf.common.util.EList;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Select Statement</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.SelectStatement#getCaculateCondition <em>Caculate Condition</em>}</li>
 *   <li>{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.SelectStatement#getColumn <em>Column</em>}</li>
 *   <li>{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.SelectStatement#getCondition <em>Condition</em>}</li>
 *   <li>{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.SelectStatement#getTbname <em>Tbname</em>}</li>
 *   <li>{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.SelectStatement#getCondition1 <em>Condition1</em>}</li>
 *   <li>{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.SelectStatement#getOrder <em>Order</em>}</li>
 * </ul>
 *
 * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.LobsterLanguagesPackage#getSelectStatement()
 * @model
 * @generated
 */
public interface SelectStatement extends Statement
{
  /**
   * Returns the value of the '<em><b>Caculate Condition</b></em>' attribute.
   * The literals are from the enumeration {@link kcl.mmdd.course.languages.lobster.lobsterLanguages.CaculateCondition}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Caculate Condition</em>' attribute.
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.CaculateCondition
   * @see #setCaculateCondition(CaculateCondition)
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.LobsterLanguagesPackage#getSelectStatement_CaculateCondition()
   * @model
   * @generated
   */
  CaculateCondition getCaculateCondition();

  /**
   * Sets the value of the '{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.SelectStatement#getCaculateCondition <em>Caculate Condition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Caculate Condition</em>' attribute.
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.CaculateCondition
   * @see #getCaculateCondition()
   * @generated
   */
  void setCaculateCondition(CaculateCondition value);

  /**
   * Returns the value of the '<em><b>Column</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Column</em>' containment reference.
   * @see #setColumn(PrimaryExpression)
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.LobsterLanguagesPackage#getSelectStatement_Column()
   * @model containment="true"
   * @generated
   */
  PrimaryExpression getColumn();

  /**
   * Sets the value of the '{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.SelectStatement#getColumn <em>Column</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Column</em>' containment reference.
   * @see #getColumn()
   * @generated
   */
  void setColumn(PrimaryExpression value);

  /**
   * Returns the value of the '<em><b>Condition</b></em>' containment reference list.
   * The list contents are of type {@link kcl.mmdd.course.languages.lobster.lobsterLanguages.ConditionStatement}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Condition</em>' containment reference list.
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.LobsterLanguagesPackage#getSelectStatement_Condition()
   * @model containment="true"
   * @generated
   */
  EList<ConditionStatement> getCondition();

  /**
   * Returns the value of the '<em><b>Tbname</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Tbname</em>' containment reference.
   * @see #setTbname(PrimaryExpression)
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.LobsterLanguagesPackage#getSelectStatement_Tbname()
   * @model containment="true"
   * @generated
   */
  PrimaryExpression getTbname();

  /**
   * Sets the value of the '{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.SelectStatement#getTbname <em>Tbname</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Tbname</em>' containment reference.
   * @see #getTbname()
   * @generated
   */
  void setTbname(PrimaryExpression value);

  /**
   * Returns the value of the '<em><b>Condition1</b></em>' containment reference list.
   * The list contents are of type {@link kcl.mmdd.course.languages.lobster.lobsterLanguages.PrimaryExpression}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Condition1</em>' containment reference list.
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.LobsterLanguagesPackage#getSelectStatement_Condition1()
   * @model containment="true"
   * @generated
   */
  EList<PrimaryExpression> getCondition1();

  /**
   * Returns the value of the '<em><b>Order</b></em>' attribute.
   * The literals are from the enumeration {@link kcl.mmdd.course.languages.lobster.lobsterLanguages.Order}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Order</em>' attribute.
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.Order
   * @see #setOrder(Order)
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.LobsterLanguagesPackage#getSelectStatement_Order()
   * @model
   * @generated
   */
  Order getOrder();

  /**
   * Sets the value of the '{@link kcl.mmdd.course.languages.lobster.lobsterLanguages.SelectStatement#getOrder <em>Order</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Order</em>' attribute.
   * @see kcl.mmdd.course.languages.lobster.lobsterLanguages.Order
   * @see #getOrder()
   * @generated
   */
  void setOrder(Order value);

} // SelectStatement
