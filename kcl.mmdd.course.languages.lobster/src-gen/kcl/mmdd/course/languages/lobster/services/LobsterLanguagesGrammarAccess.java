/*
 * generated by Xtext 2.24.0
 */
package kcl.mmdd.course.languages.lobster.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LobsterLanguagesGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class LobsterProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mmdd.course.languages.lobster.LobsterLanguages.LobsterProgram");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//LobsterProgram:
		//	statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mmdd.course.languages.lobster.LobsterLanguages.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCreateDatabaseStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCreateTableStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInsertStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDeleteDataStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDeleteTableStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cUpdateStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSelectStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cVariableCharacterParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Statement:
		//	CreateDatabaseStatement | CreateTableStatement | InsertStatement | DeleteDataStatement | DeleteTableStatement |
		//	UpdateStatement | SelectStatement | VariableCharacter;
		@Override public ParserRule getRule() { return rule; }
		
		//CreateDatabaseStatement | CreateTableStatement | InsertStatement | DeleteDataStatement | DeleteTableStatement |
		//UpdateStatement | SelectStatement | VariableCharacter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CreateDatabaseStatement
		public RuleCall getCreateDatabaseStatementParserRuleCall_0() { return cCreateDatabaseStatementParserRuleCall_0; }
		
		//CreateTableStatement
		public RuleCall getCreateTableStatementParserRuleCall_1() { return cCreateTableStatementParserRuleCall_1; }
		
		//InsertStatement
		public RuleCall getInsertStatementParserRuleCall_2() { return cInsertStatementParserRuleCall_2; }
		
		//DeleteDataStatement
		public RuleCall getDeleteDataStatementParserRuleCall_3() { return cDeleteDataStatementParserRuleCall_3; }
		
		//DeleteTableStatement
		public RuleCall getDeleteTableStatementParserRuleCall_4() { return cDeleteTableStatementParserRuleCall_4; }
		
		//UpdateStatement
		public RuleCall getUpdateStatementParserRuleCall_5() { return cUpdateStatementParserRuleCall_5; }
		
		//SelectStatement
		public RuleCall getSelectStatementParserRuleCall_6() { return cSelectStatementParserRuleCall_6; }
		
		//VariableCharacter
		public RuleCall getVariableCharacterParserRuleCall_7() { return cVariableCharacterParserRuleCall_7; }
	}
	public class VariableCharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mmdd.course.languages.lobster.LobsterLanguages.VariableCharacter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueINTTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//VariableCharacter:
		//	"var" name=ID "=" value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"var" name=ID "=" value=INT
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=INT
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_3_0() { return cValueINTTerminalRuleCall_3_0; }
	}
	public class CreateDatabaseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mmdd.course.languages.lobster.LobsterLanguages.CreateDatabaseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDatabaseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNamedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDbnameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDbnamePrimaryExpressionParserRuleCall_4_0 = (RuleCall)cDbnameAssignment_4.eContents().get(0);
		
		//CreateDatabaseStatement:
		//	"Create" "a" "database" "named" dbname=PrimaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//"Create" "a" "database" "named" dbname=PrimaryExpression
		public Group getGroup() { return cGroup; }
		
		//"Create"
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//"a"
		public Keyword getAKeyword_1() { return cAKeyword_1; }
		
		//"database"
		public Keyword getDatabaseKeyword_2() { return cDatabaseKeyword_2; }
		
		//"named"
		public Keyword getNamedKeyword_3() { return cNamedKeyword_3; }
		
		//dbname=PrimaryExpression
		public Assignment getDbnameAssignment_4() { return cDbnameAssignment_4; }
		
		//PrimaryExpression
		public RuleCall getDbnamePrimaryExpressionParserRuleCall_4_0() { return cDbnamePrimaryExpressionParserRuleCall_4_0; }
	}
	public class CreateTableStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mmdd.course.languages.lobster.LobsterLanguages.CreateTableStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTableKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNamedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTbnameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTbnamePrimaryExpressionParserRuleCall_4_0 = (RuleCall)cTbnameAssignment_4.eContents().get(0);
		private final Keyword cInKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDbnameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDbnamePrimaryExpressionParserRuleCall_6_0 = (RuleCall)cDbnameAssignment_6.eContents().get(0);
		private final Keyword cIncludeKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cColumnsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cColumnsCreateTableColumnParserRuleCall_9_0 = (RuleCall)cColumnsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//CreateTableStatement:
		//	"Create" "a" "table" "named" tbname=PrimaryExpression "in" dbname=PrimaryExpression "include"
		//	"{" columns+=CreateTableColumn* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"Create" "a" "table" "named" tbname=PrimaryExpression "in" dbname=PrimaryExpression "include"
		//"{" columns+=CreateTableColumn* "}"
		public Group getGroup() { return cGroup; }
		
		//"Create"
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//"a"
		public Keyword getAKeyword_1() { return cAKeyword_1; }
		
		//"table"
		public Keyword getTableKeyword_2() { return cTableKeyword_2; }
		
		//"named"
		public Keyword getNamedKeyword_3() { return cNamedKeyword_3; }
		
		//tbname=PrimaryExpression
		public Assignment getTbnameAssignment_4() { return cTbnameAssignment_4; }
		
		//PrimaryExpression
		public RuleCall getTbnamePrimaryExpressionParserRuleCall_4_0() { return cTbnamePrimaryExpressionParserRuleCall_4_0; }
		
		//"in"
		public Keyword getInKeyword_5() { return cInKeyword_5; }
		
		//dbname=PrimaryExpression
		public Assignment getDbnameAssignment_6() { return cDbnameAssignment_6; }
		
		//PrimaryExpression
		public RuleCall getDbnamePrimaryExpressionParserRuleCall_6_0() { return cDbnamePrimaryExpressionParserRuleCall_6_0; }
		
		//"include"
		public Keyword getIncludeKeyword_7() { return cIncludeKeyword_7; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//columns+=CreateTableColumn*
		public Assignment getColumnsAssignment_9() { return cColumnsAssignment_9; }
		
		//CreateTableColumn
		public RuleCall getColumnsCreateTableColumnParserRuleCall_9_0() { return cColumnsCreateTableColumnParserRuleCall_9_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class CreateTableColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mmdd.course.languages.lobster.LobsterLanguages.CreateTableColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColumnNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColumnNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColumnNamePrimaryExpressionParserRuleCall_1_0 = (RuleCall)cColumnNameAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDatatypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDatatypeDataTypeEnumRuleCall_3_0 = (RuleCall)cDatatypeAssignment_3.eContents().get(0);
		private final Keyword cTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cMaxKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cSizeAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cSizeIntLiteralParserRuleCall_5_2_0 = (RuleCall)cSizeAssignment_5_2.eContents().get(0);
		private final Keyword cCharactersKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CreateTableColumn:
		//	"Column Name:" columnName=PrimaryExpression "is" datatype=DataType "type" ("(" "max" size=IntLiteral "characters"
		//	")")? ","?;
		@Override public ParserRule getRule() { return rule; }
		
		//"Column Name:" columnName=PrimaryExpression "is" datatype=DataType "type" ("(" "max" size=IntLiteral "characters"
		//")")? ","?
		public Group getGroup() { return cGroup; }
		
		//"Column Name:"
		public Keyword getColumnNameKeyword_0() { return cColumnNameKeyword_0; }
		
		//columnName=PrimaryExpression
		public Assignment getColumnNameAssignment_1() { return cColumnNameAssignment_1; }
		
		//PrimaryExpression
		public RuleCall getColumnNamePrimaryExpressionParserRuleCall_1_0() { return cColumnNamePrimaryExpressionParserRuleCall_1_0; }
		
		//"is"
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//datatype=DataType
		public Assignment getDatatypeAssignment_3() { return cDatatypeAssignment_3; }
		
		//DataType
		public RuleCall getDatatypeDataTypeEnumRuleCall_3_0() { return cDatatypeDataTypeEnumRuleCall_3_0; }
		
		//"type"
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }
		
		//("(" "max" size=IntLiteral "characters" ")")?
		public Group getGroup_5() { return cGroup_5; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//"max"
		public Keyword getMaxKeyword_5_1() { return cMaxKeyword_5_1; }
		
		//size=IntLiteral
		public Assignment getSizeAssignment_5_2() { return cSizeAssignment_5_2; }
		
		//IntLiteral
		public RuleCall getSizeIntLiteralParserRuleCall_5_2_0() { return cSizeIntLiteralParserRuleCall_5_2_0; }
		
		//"characters"
		public Keyword getCharactersKeyword_5_3() { return cCharactersKeyword_5_3; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
		
		//","?
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
	}
	public class InsertStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mmdd.course.languages.lobster.LobsterLanguages.InsertStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cValueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColumnNameKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cColumnAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cColumnPrimaryExpressionParserRuleCall_3_1_0 = (RuleCall)cColumnAssignment_3_1.eContents().get(0);
		private final Keyword cIsKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cValueAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cValuePrimaryExpressionParserRuleCall_3_3_0 = (RuleCall)cValueAssignment_3_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cIntoKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTbnameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTbnamePrimaryExpressionParserRuleCall_6_0 = (RuleCall)cTbnameAssignment_6.eContents().get(0);
		private final Keyword cTableKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//InsertStatement:
		//	"Insert" "value" "{" ("Column Name:" column+=PrimaryExpression "is" value+=PrimaryExpression ","?)* "}" "into"
		//	tbname=PrimaryExpression "table";
		@Override public ParserRule getRule() { return rule; }
		
		//"Insert" "value" "{" ("Column Name:" column+=PrimaryExpression "is" value+=PrimaryExpression ","?)* "}" "into"
		//tbname=PrimaryExpression "table"
		public Group getGroup() { return cGroup; }
		
		//"Insert"
		public Keyword getInsertKeyword_0() { return cInsertKeyword_0; }
		
		//"value"
		public Keyword getValueKeyword_1() { return cValueKeyword_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//("Column Name:" column+=PrimaryExpression "is" value+=PrimaryExpression ","?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//"Column Name:"
		public Keyword getColumnNameKeyword_3_0() { return cColumnNameKeyword_3_0; }
		
		//column+=PrimaryExpression
		public Assignment getColumnAssignment_3_1() { return cColumnAssignment_3_1; }
		
		//PrimaryExpression
		public RuleCall getColumnPrimaryExpressionParserRuleCall_3_1_0() { return cColumnPrimaryExpressionParserRuleCall_3_1_0; }
		
		//"is"
		public Keyword getIsKeyword_3_2() { return cIsKeyword_3_2; }
		
		//value+=PrimaryExpression
		public Assignment getValueAssignment_3_3() { return cValueAssignment_3_3; }
		
		//PrimaryExpression
		public RuleCall getValuePrimaryExpressionParserRuleCall_3_3_0() { return cValuePrimaryExpressionParserRuleCall_3_3_0; }
		
		//","?
		public Keyword getCommaKeyword_3_4() { return cCommaKeyword_3_4; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//"into"
		public Keyword getIntoKeyword_5() { return cIntoKeyword_5; }
		
		//tbname=PrimaryExpression
		public Assignment getTbnameAssignment_6() { return cTbnameAssignment_6; }
		
		//PrimaryExpression
		public RuleCall getTbnamePrimaryExpressionParserRuleCall_6_0() { return cTbnamePrimaryExpressionParserRuleCall_6_0; }
		
		//"table"
		public Keyword getTableKeyword_7() { return cTableKeyword_7; }
	}
	public class DeleteDataStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mmdd.course.languages.lobster.LobsterLanguages.DeleteDataStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionMoreConditionStatementParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cFromKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cTableKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTbnameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTbnamePrimaryExpressionParserRuleCall_6_0 = (RuleCall)cTbnameAssignment_6.eContents().get(0);
		
		//DeleteDataStatement:
		//	"Delete" "{" condition+=MoreConditionStatement* "}"
		//	"from" "Table" tbname=PrimaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//"Delete" "{" condition+=MoreConditionStatement* "}"
		//"from" "Table" tbname=PrimaryExpression
		public Group getGroup() { return cGroup; }
		
		//"Delete"
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//condition+=MoreConditionStatement*
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//MoreConditionStatement
		public RuleCall getConditionMoreConditionStatementParserRuleCall_2_0() { return cConditionMoreConditionStatementParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//"from"
		public Keyword getFromKeyword_4() { return cFromKeyword_4; }
		
		//"Table"
		public Keyword getTableKeyword_5() { return cTableKeyword_5; }
		
		//tbname=PrimaryExpression
		public Assignment getTbnameAssignment_6() { return cTbnameAssignment_6; }
		
		//PrimaryExpression
		public RuleCall getTbnamePrimaryExpressionParserRuleCall_6_0() { return cTbnamePrimaryExpressionParserRuleCall_6_0; }
	}
	public class MoreConditionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mmdd.course.languages.lobster.LobsterLanguages.MoreConditionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColumnNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColumnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColumnPrimaryExpressionParserRuleCall_1_0 = (RuleCall)cColumnAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuePrimaryExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Assignment cMoreconditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMoreconditionMoreConditionEnumRuleCall_4_0 = (RuleCall)cMoreconditionAssignment_4.eContents().get(0);
		
		//MoreConditionStatement:
		//	"Column Name:" column=PrimaryExpression "is" value=PrimaryExpression morecondition=MoreCondition;
		@Override public ParserRule getRule() { return rule; }
		
		//"Column Name:" column=PrimaryExpression "is" value=PrimaryExpression morecondition=MoreCondition
		public Group getGroup() { return cGroup; }
		
		//"Column Name:"
		public Keyword getColumnNameKeyword_0() { return cColumnNameKeyword_0; }
		
		//column=PrimaryExpression
		public Assignment getColumnAssignment_1() { return cColumnAssignment_1; }
		
		//PrimaryExpression
		public RuleCall getColumnPrimaryExpressionParserRuleCall_1_0() { return cColumnPrimaryExpressionParserRuleCall_1_0; }
		
		//"is"
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//value=PrimaryExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//PrimaryExpression
		public RuleCall getValuePrimaryExpressionParserRuleCall_3_0() { return cValuePrimaryExpressionParserRuleCall_3_0; }
		
		//morecondition=MoreCondition
		public Assignment getMoreconditionAssignment_4() { return cMoreconditionAssignment_4; }
		
		//MoreCondition
		public RuleCall getMoreconditionMoreConditionEnumRuleCall_4_0() { return cMoreconditionMoreConditionEnumRuleCall_4_0; }
	}
	public class DeleteTableStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mmdd.course.languages.lobster.LobsterLanguages.DeleteTableStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteAllFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTbnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTbnamePrimaryExpressionParserRuleCall_1_0 = (RuleCall)cTbnameAssignment_1.eContents().get(0);
		private final Keyword cTableKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DeleteTableStatement:
		//	"Delete All From" tbname=PrimaryExpression "Table";
		@Override public ParserRule getRule() { return rule; }
		
		//"Delete All From" tbname=PrimaryExpression "Table"
		public Group getGroup() { return cGroup; }
		
		//"Delete All From"
		public Keyword getDeleteAllFromKeyword_0() { return cDeleteAllFromKeyword_0; }
		
		//tbname=PrimaryExpression
		public Assignment getTbnameAssignment_1() { return cTbnameAssignment_1; }
		
		//PrimaryExpression
		public RuleCall getTbnamePrimaryExpressionParserRuleCall_1_0() { return cTbnamePrimaryExpressionParserRuleCall_1_0; }
		
		//"Table"
		public Keyword getTableKeyword_2() { return cTableKeyword_2; }
	}
	public class UpdateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mmdd.course.languages.lobster.LobsterLanguages.UpdateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUpdateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTbnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTbnamePrimaryExpressionParserRuleCall_1_0 = (RuleCall)cTbnameAssignment_1.eContents().get(0);
		private final Keyword cTableKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSetKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSetvalueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSetvalueConditionStatementParserRuleCall_5_0 = (RuleCall)cSetvalueAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cWhereKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cConditionAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cConditionConditionStatementParserRuleCall_9_0 = (RuleCall)cConditionAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//UpdateStatement:
		//	"Update" tbname=PrimaryExpression "Table"
		//	"set" "{" setvalue+=ConditionStatement* "}"
		//	"where" "{" condition+=ConditionStatement* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"Update" tbname=PrimaryExpression "Table"
		//"set" "{" setvalue+=ConditionStatement* "}"
		//"where" "{" condition+=ConditionStatement* "}"
		public Group getGroup() { return cGroup; }
		
		//"Update"
		public Keyword getUpdateKeyword_0() { return cUpdateKeyword_0; }
		
		//tbname=PrimaryExpression
		public Assignment getTbnameAssignment_1() { return cTbnameAssignment_1; }
		
		//PrimaryExpression
		public RuleCall getTbnamePrimaryExpressionParserRuleCall_1_0() { return cTbnamePrimaryExpressionParserRuleCall_1_0; }
		
		//"Table"
		public Keyword getTableKeyword_2() { return cTableKeyword_2; }
		
		//"set"
		public Keyword getSetKeyword_3() { return cSetKeyword_3; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//setvalue+=ConditionStatement*
		public Assignment getSetvalueAssignment_5() { return cSetvalueAssignment_5; }
		
		//ConditionStatement
		public RuleCall getSetvalueConditionStatementParserRuleCall_5_0() { return cSetvalueConditionStatementParserRuleCall_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//"where"
		public Keyword getWhereKeyword_7() { return cWhereKeyword_7; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//condition+=ConditionStatement*
		public Assignment getConditionAssignment_9() { return cConditionAssignment_9; }
		
		//ConditionStatement
		public RuleCall getConditionConditionStatementParserRuleCall_9_0() { return cConditionConditionStatementParserRuleCall_9_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class SelectStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mmdd.course.languages.lobster.LobsterLanguages.SelectStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFindOutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cCaculateConditionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cCaculateConditionCaculateConditionEnumRuleCall_1_0_0 = (RuleCall)cCaculateConditionAssignment_1_0.eContents().get(0);
		private final Keyword cOfKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cColumnNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColumnAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColumnPrimaryExpressionParserRuleCall_3_0 = (RuleCall)cColumnAssignment_3.eContents().get(0);
		private final Keyword cWhereKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cConditionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConditionConditionStatementParserRuleCall_6_0 = (RuleCall)cConditionAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cFromKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cTableKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cTbnameAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cTbnamePrimaryExpressionParserRuleCall_10_0 = (RuleCall)cTbnameAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cOrderByKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Group cGroup_11_2 = (Group)cGroup_11.eContents().get(2);
		private final Keyword cColumnNameKeyword_11_2_0 = (Keyword)cGroup_11_2.eContents().get(0);
		private final Assignment cCondition1Assignment_11_2_1 = (Assignment)cGroup_11_2.eContents().get(1);
		private final RuleCall cCondition1PrimaryExpressionParserRuleCall_11_2_1_0 = (RuleCall)cCondition1Assignment_11_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_11_2_2 = (Keyword)cGroup_11_2.eContents().get(2);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cSortedInKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cOrderAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cOrderOrderEnumRuleCall_12_1_0 = (RuleCall)cOrderAssignment_12_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//SelectStatement:
		//	"Find out" (caculateCondition=CaculateCondition "of")? "Column Name:" column=PrimaryExpression
		//	"where" "{" condition+=ConditionStatement* "}"
		//	"from" "Table" tbname=PrimaryExpression ("order by" "{" ("Column Name:" condition1+=PrimaryExpression* ","?)*)? (
		//	"sorted in" order=Order)? "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"Find out" (caculateCondition=CaculateCondition "of")? "Column Name:" column=PrimaryExpression
		//"where" "{" condition+=ConditionStatement* "}"
		//"from" "Table" tbname=PrimaryExpression ("order by" "{" ("Column Name:" condition1+=PrimaryExpression* ","?)*)? (
		//"sorted in" order=Order)? "}"
		public Group getGroup() { return cGroup; }
		
		//"Find out"
		public Keyword getFindOutKeyword_0() { return cFindOutKeyword_0; }
		
		//(caculateCondition=CaculateCondition "of")?
		public Group getGroup_1() { return cGroup_1; }
		
		//caculateCondition=CaculateCondition
		public Assignment getCaculateConditionAssignment_1_0() { return cCaculateConditionAssignment_1_0; }
		
		//CaculateCondition
		public RuleCall getCaculateConditionCaculateConditionEnumRuleCall_1_0_0() { return cCaculateConditionCaculateConditionEnumRuleCall_1_0_0; }
		
		//"of"
		public Keyword getOfKeyword_1_1() { return cOfKeyword_1_1; }
		
		//"Column Name:"
		public Keyword getColumnNameKeyword_2() { return cColumnNameKeyword_2; }
		
		//column=PrimaryExpression
		public Assignment getColumnAssignment_3() { return cColumnAssignment_3; }
		
		//PrimaryExpression
		public RuleCall getColumnPrimaryExpressionParserRuleCall_3_0() { return cColumnPrimaryExpressionParserRuleCall_3_0; }
		
		//"where"
		public Keyword getWhereKeyword_4() { return cWhereKeyword_4; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//condition+=ConditionStatement*
		public Assignment getConditionAssignment_6() { return cConditionAssignment_6; }
		
		//ConditionStatement
		public RuleCall getConditionConditionStatementParserRuleCall_6_0() { return cConditionConditionStatementParserRuleCall_6_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//"from"
		public Keyword getFromKeyword_8() { return cFromKeyword_8; }
		
		//"Table"
		public Keyword getTableKeyword_9() { return cTableKeyword_9; }
		
		//tbname=PrimaryExpression
		public Assignment getTbnameAssignment_10() { return cTbnameAssignment_10; }
		
		//PrimaryExpression
		public RuleCall getTbnamePrimaryExpressionParserRuleCall_10_0() { return cTbnamePrimaryExpressionParserRuleCall_10_0; }
		
		//("order by" "{" ("Column Name:" condition1+=PrimaryExpression* ","?)*)?
		public Group getGroup_11() { return cGroup_11; }
		
		//"order by"
		public Keyword getOrderByKeyword_11_0() { return cOrderByKeyword_11_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_11_1() { return cLeftCurlyBracketKeyword_11_1; }
		
		//("Column Name:" condition1+=PrimaryExpression* ","?)*
		public Group getGroup_11_2() { return cGroup_11_2; }
		
		//"Column Name:"
		public Keyword getColumnNameKeyword_11_2_0() { return cColumnNameKeyword_11_2_0; }
		
		//condition1+=PrimaryExpression*
		public Assignment getCondition1Assignment_11_2_1() { return cCondition1Assignment_11_2_1; }
		
		//PrimaryExpression
		public RuleCall getCondition1PrimaryExpressionParserRuleCall_11_2_1_0() { return cCondition1PrimaryExpressionParserRuleCall_11_2_1_0; }
		
		//","?
		public Keyword getCommaKeyword_11_2_2() { return cCommaKeyword_11_2_2; }
		
		//("sorted in" order=Order)?
		public Group getGroup_12() { return cGroup_12; }
		
		//"sorted in"
		public Keyword getSortedInKeyword_12_0() { return cSortedInKeyword_12_0; }
		
		//order=Order
		public Assignment getOrderAssignment_12_1() { return cOrderAssignment_12_1; }
		
		//Order
		public RuleCall getOrderOrderEnumRuleCall_12_1_0() { return cOrderOrderEnumRuleCall_12_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class ConditionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mmdd.course.languages.lobster.LobsterLanguages.ConditionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColumnNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColumnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColumnPrimaryExpressionParserRuleCall_1_0 = (RuleCall)cColumnAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuePrimaryExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ConditionStatement:
		//	"Column Name:" column=PrimaryExpression "is" value=PrimaryExpression ","?;
		@Override public ParserRule getRule() { return rule; }
		
		//"Column Name:" column=PrimaryExpression "is" value=PrimaryExpression ","?
		public Group getGroup() { return cGroup; }
		
		//"Column Name:"
		public Keyword getColumnNameKeyword_0() { return cColumnNameKeyword_0; }
		
		//column=PrimaryExpression
		public Assignment getColumnAssignment_1() { return cColumnAssignment_1; }
		
		//PrimaryExpression
		public RuleCall getColumnPrimaryExpressionParserRuleCall_1_0() { return cColumnPrimaryExpressionParserRuleCall_1_0; }
		
		//"is"
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//value=PrimaryExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//PrimaryExpression
		public RuleCall getValuePrimaryExpressionParserRuleCall_3_0() { return cValuePrimaryExpressionParserRuleCall_3_0; }
		
		//","?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mmdd.course.languages.lobster.LobsterLanguages.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PrimaryExpression:
		//	IntLiteral | CharLiteral | VariableReference;
		@Override public ParserRule getRule() { return rule; }
		
		//IntLiteral | CharLiteral | VariableReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_0() { return cIntLiteralParserRuleCall_0; }
		
		//CharLiteral
		public RuleCall getCharLiteralParserRuleCall_1() { return cCharLiteralParserRuleCall_1; }
		
		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_2() { return cVariableReferenceParserRuleCall_2; }
	}
	public class CharLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mmdd.course.languages.lobster.LobsterLanguages.CharLiteral");
		private final Assignment cVacAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVacSTRINGTerminalRuleCall_0 = (RuleCall)cVacAssignment.eContents().get(0);
		
		//CharLiteral:
		//	vac=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//vac=STRING
		public Assignment getVacAssignment() { return cVacAssignment; }
		
		//STRING
		public RuleCall getVacSTRINGTerminalRuleCall_0() { return cVacSTRINGTerminalRuleCall_0; }
	}
	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mmdd.course.languages.lobster.LobsterLanguages.IntLiteral");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//IntLiteral:
		//	val=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//val=INT
		public Assignment getValAssignment() { return cValAssignment; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_0() { return cValINTTerminalRuleCall_0; }
	}
	public class VariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mmdd.course.languages.lobster.LobsterLanguages.VariableReference");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarVariableCharacterCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarVariableCharacterIDTerminalRuleCall_0_1 = (RuleCall)cVarVariableCharacterCrossReference_0.eContents().get(1);
		
		//VariableReference:
		//	var=[VariableCharacter];
		@Override public ParserRule getRule() { return rule; }
		
		//var=[VariableCharacter]
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//[VariableCharacter]
		public CrossReference getVarVariableCharacterCrossReference_0() { return cVarVariableCharacterCrossReference_0; }
		
		//ID
		public RuleCall getVarVariableCharacterIDTerminalRuleCall_0_1() { return cVarVariableCharacterIDTerminalRuleCall_0_1; }
	}
	
	public class DataTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mmdd.course.languages.lobster.LobsterLanguages.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIntegerIntegerKeyword_0_0 = (Keyword)cIntegerEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCharacterEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCharacterCharacterKeyword_1_0 = (Keyword)cCharacterEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DataType:
		//	Integer | Character;
		public EnumRule getRule() { return rule; }
		
		//Integer | Character
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_0() { return cIntegerEnumLiteralDeclaration_0; }
		
		//"Integer"
		public Keyword getIntegerIntegerKeyword_0_0() { return cIntegerIntegerKeyword_0_0; }
		
		//Character
		public EnumLiteralDeclaration getCharacterEnumLiteralDeclaration_1() { return cCharacterEnumLiteralDeclaration_1; }
		
		//"Character"
		public Keyword getCharacterCharacterKeyword_1_0() { return cCharacterCharacterKeyword_1_0; }
	}
	public class MoreConditionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mmdd.course.languages.lobster.LobsterLanguages.MoreCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAndAndKeyword_0_0 = (Keyword)cAndEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOrOrKeyword_1_0 = (Keyword)cOrEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFinishEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFinishFinishKeyword_2_0 = (Keyword)cFinishEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MoreCondition:
		//	and | or | finish;
		public EnumRule getRule() { return rule; }
		
		//and | or | finish
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//and
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_0() { return cAndEnumLiteralDeclaration_0; }
		
		//"and"
		public Keyword getAndAndKeyword_0_0() { return cAndAndKeyword_0_0; }
		
		//or
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_1() { return cOrEnumLiteralDeclaration_1; }
		
		//"or"
		public Keyword getOrOrKeyword_1_0() { return cOrOrKeyword_1_0; }
		
		//finish
		public EnumLiteralDeclaration getFinishEnumLiteralDeclaration_2() { return cFinishEnumLiteralDeclaration_2; }
		
		//"finish"
		public Keyword getFinishFinishKeyword_2_0() { return cFinishFinishKeyword_2_0; }
	}
	public class CaculateConditionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mmdd.course.languages.lobster.LobsterLanguages.CaculateCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMaximumEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMaximumMaximumKeyword_0_0 = (Keyword)cMaximumEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMinimumEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMinimumMinimumKeyword_1_0 = (Keyword)cMinimumEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAverageEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAverageAverageKeyword_2_0 = (Keyword)cAverageEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCountEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCountCountKeyword_3_0 = (Keyword)cCountEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSumEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSumSumKeyword_4_0 = (Keyword)cSumEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum CaculateCondition:
		//	maximum | minimum | average | count | sum;
		public EnumRule getRule() { return rule; }
		
		//maximum | minimum | average | count | sum
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//maximum
		public EnumLiteralDeclaration getMaximumEnumLiteralDeclaration_0() { return cMaximumEnumLiteralDeclaration_0; }
		
		//"maximum"
		public Keyword getMaximumMaximumKeyword_0_0() { return cMaximumMaximumKeyword_0_0; }
		
		//minimum
		public EnumLiteralDeclaration getMinimumEnumLiteralDeclaration_1() { return cMinimumEnumLiteralDeclaration_1; }
		
		//"minimum"
		public Keyword getMinimumMinimumKeyword_1_0() { return cMinimumMinimumKeyword_1_0; }
		
		//average
		public EnumLiteralDeclaration getAverageEnumLiteralDeclaration_2() { return cAverageEnumLiteralDeclaration_2; }
		
		//"average"
		public Keyword getAverageAverageKeyword_2_0() { return cAverageAverageKeyword_2_0; }
		
		//count
		public EnumLiteralDeclaration getCountEnumLiteralDeclaration_3() { return cCountEnumLiteralDeclaration_3; }
		
		//"count"
		public Keyword getCountCountKeyword_3_0() { return cCountCountKeyword_3_0; }
		
		//sum
		public EnumLiteralDeclaration getSumEnumLiteralDeclaration_4() { return cSumEnumLiteralDeclaration_4; }
		
		//"sum"
		public Keyword getSumSumKeyword_4_0() { return cSumSumKeyword_4_0; }
	}
	public class OrderElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mmdd.course.languages.lobster.LobsterLanguages.Order");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAscendingEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAscendingAscendingKeyword_0_0 = (Keyword)cAscendingEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDescendingEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDescendingDescendingKeyword_1_0 = (Keyword)cDescendingEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Order:
		//	ascending | descending;
		public EnumRule getRule() { return rule; }
		
		//ascending | descending
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ascending
		public EnumLiteralDeclaration getAscendingEnumLiteralDeclaration_0() { return cAscendingEnumLiteralDeclaration_0; }
		
		//"ascending"
		public Keyword getAscendingAscendingKeyword_0_0() { return cAscendingAscendingKeyword_0_0; }
		
		//descending
		public EnumLiteralDeclaration getDescendingEnumLiteralDeclaration_1() { return cDescendingEnumLiteralDeclaration_1; }
		
		//"descending"
		public Keyword getDescendingDescendingKeyword_1_0() { return cDescendingDescendingKeyword_1_0; }
	}
	
	private final LobsterProgramElements pLobsterProgram;
	private final StatementElements pStatement;
	private final VariableCharacterElements pVariableCharacter;
	private final CreateDatabaseStatementElements pCreateDatabaseStatement;
	private final CreateTableStatementElements pCreateTableStatement;
	private final CreateTableColumnElements pCreateTableColumn;
	private final DataTypeElements eDataType;
	private final InsertStatementElements pInsertStatement;
	private final DeleteDataStatementElements pDeleteDataStatement;
	private final MoreConditionStatementElements pMoreConditionStatement;
	private final MoreConditionElements eMoreCondition;
	private final DeleteTableStatementElements pDeleteTableStatement;
	private final UpdateStatementElements pUpdateStatement;
	private final SelectStatementElements pSelectStatement;
	private final ConditionStatementElements pConditionStatement;
	private final CaculateConditionElements eCaculateCondition;
	private final OrderElements eOrder;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final CharLiteralElements pCharLiteral;
	private final IntLiteralElements pIntLiteral;
	private final VariableReferenceElements pVariableReference;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LobsterLanguagesGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pLobsterProgram = new LobsterProgramElements();
		this.pStatement = new StatementElements();
		this.pVariableCharacter = new VariableCharacterElements();
		this.pCreateDatabaseStatement = new CreateDatabaseStatementElements();
		this.pCreateTableStatement = new CreateTableStatementElements();
		this.pCreateTableColumn = new CreateTableColumnElements();
		this.eDataType = new DataTypeElements();
		this.pInsertStatement = new InsertStatementElements();
		this.pDeleteDataStatement = new DeleteDataStatementElements();
		this.pMoreConditionStatement = new MoreConditionStatementElements();
		this.eMoreCondition = new MoreConditionElements();
		this.pDeleteTableStatement = new DeleteTableStatementElements();
		this.pUpdateStatement = new UpdateStatementElements();
		this.pSelectStatement = new SelectStatementElements();
		this.pConditionStatement = new ConditionStatementElements();
		this.eCaculateCondition = new CaculateConditionElements();
		this.eOrder = new OrderElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pCharLiteral = new CharLiteralElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pVariableReference = new VariableReferenceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("kcl.mmdd.course.languages.lobster.LobsterLanguages".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//LobsterProgram:
	//	statements+=Statement*;
	public LobsterProgramElements getLobsterProgramAccess() {
		return pLobsterProgram;
	}
	
	public ParserRule getLobsterProgramRule() {
		return getLobsterProgramAccess().getRule();
	}
	
	//Statement:
	//	CreateDatabaseStatement | CreateTableStatement | InsertStatement | DeleteDataStatement | DeleteTableStatement |
	//	UpdateStatement | SelectStatement | VariableCharacter;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//VariableCharacter:
	//	"var" name=ID "=" value=INT;
	public VariableCharacterElements getVariableCharacterAccess() {
		return pVariableCharacter;
	}
	
	public ParserRule getVariableCharacterRule() {
		return getVariableCharacterAccess().getRule();
	}
	
	//CreateDatabaseStatement:
	//	"Create" "a" "database" "named" dbname=PrimaryExpression;
	public CreateDatabaseStatementElements getCreateDatabaseStatementAccess() {
		return pCreateDatabaseStatement;
	}
	
	public ParserRule getCreateDatabaseStatementRule() {
		return getCreateDatabaseStatementAccess().getRule();
	}
	
	//CreateTableStatement:
	//	"Create" "a" "table" "named" tbname=PrimaryExpression "in" dbname=PrimaryExpression "include"
	//	"{" columns+=CreateTableColumn* "}";
	public CreateTableStatementElements getCreateTableStatementAccess() {
		return pCreateTableStatement;
	}
	
	public ParserRule getCreateTableStatementRule() {
		return getCreateTableStatementAccess().getRule();
	}
	
	//CreateTableColumn:
	//	"Column Name:" columnName=PrimaryExpression "is" datatype=DataType "type" ("(" "max" size=IntLiteral "characters"
	//	")")? ","?;
	public CreateTableColumnElements getCreateTableColumnAccess() {
		return pCreateTableColumn;
	}
	
	public ParserRule getCreateTableColumnRule() {
		return getCreateTableColumnAccess().getRule();
	}
	
	//enum DataType:
	//	Integer | Character;
	public DataTypeElements getDataTypeAccess() {
		return eDataType;
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//InsertStatement:
	//	"Insert" "value" "{" ("Column Name:" column+=PrimaryExpression "is" value+=PrimaryExpression ","?)* "}" "into"
	//	tbname=PrimaryExpression "table";
	public InsertStatementElements getInsertStatementAccess() {
		return pInsertStatement;
	}
	
	public ParserRule getInsertStatementRule() {
		return getInsertStatementAccess().getRule();
	}
	
	//DeleteDataStatement:
	//	"Delete" "{" condition+=MoreConditionStatement* "}"
	//	"from" "Table" tbname=PrimaryExpression;
	public DeleteDataStatementElements getDeleteDataStatementAccess() {
		return pDeleteDataStatement;
	}
	
	public ParserRule getDeleteDataStatementRule() {
		return getDeleteDataStatementAccess().getRule();
	}
	
	//MoreConditionStatement:
	//	"Column Name:" column=PrimaryExpression "is" value=PrimaryExpression morecondition=MoreCondition;
	public MoreConditionStatementElements getMoreConditionStatementAccess() {
		return pMoreConditionStatement;
	}
	
	public ParserRule getMoreConditionStatementRule() {
		return getMoreConditionStatementAccess().getRule();
	}
	
	//enum MoreCondition:
	//	and | or | finish;
	public MoreConditionElements getMoreConditionAccess() {
		return eMoreCondition;
	}
	
	public EnumRule getMoreConditionRule() {
		return getMoreConditionAccess().getRule();
	}
	
	//DeleteTableStatement:
	//	"Delete All From" tbname=PrimaryExpression "Table";
	public DeleteTableStatementElements getDeleteTableStatementAccess() {
		return pDeleteTableStatement;
	}
	
	public ParserRule getDeleteTableStatementRule() {
		return getDeleteTableStatementAccess().getRule();
	}
	
	//UpdateStatement:
	//	"Update" tbname=PrimaryExpression "Table"
	//	"set" "{" setvalue+=ConditionStatement* "}"
	//	"where" "{" condition+=ConditionStatement* "}";
	public UpdateStatementElements getUpdateStatementAccess() {
		return pUpdateStatement;
	}
	
	public ParserRule getUpdateStatementRule() {
		return getUpdateStatementAccess().getRule();
	}
	
	//SelectStatement:
	//	"Find out" (caculateCondition=CaculateCondition "of")? "Column Name:" column=PrimaryExpression
	//	"where" "{" condition+=ConditionStatement* "}"
	//	"from" "Table" tbname=PrimaryExpression ("order by" "{" ("Column Name:" condition1+=PrimaryExpression* ","?)*)? (
	//	"sorted in" order=Order)? "}";
	public SelectStatementElements getSelectStatementAccess() {
		return pSelectStatement;
	}
	
	public ParserRule getSelectStatementRule() {
		return getSelectStatementAccess().getRule();
	}
	
	//ConditionStatement:
	//	"Column Name:" column=PrimaryExpression "is" value=PrimaryExpression ","?;
	public ConditionStatementElements getConditionStatementAccess() {
		return pConditionStatement;
	}
	
	public ParserRule getConditionStatementRule() {
		return getConditionStatementAccess().getRule();
	}
	
	//enum CaculateCondition:
	//	maximum | minimum | average | count | sum;
	public CaculateConditionElements getCaculateConditionAccess() {
		return eCaculateCondition;
	}
	
	public EnumRule getCaculateConditionRule() {
		return getCaculateConditionAccess().getRule();
	}
	
	//enum Order:
	//	ascending | descending;
	public OrderElements getOrderAccess() {
		return eOrder;
	}
	
	public EnumRule getOrderRule() {
		return getOrderAccess().getRule();
	}
	
	//PrimaryExpression:
	//	IntLiteral | CharLiteral | VariableReference;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//CharLiteral:
	//	vac=STRING;
	public CharLiteralElements getCharLiteralAccess() {
		return pCharLiteral;
	}
	
	public ParserRule getCharLiteralRule() {
		return getCharLiteralAccess().getRule();
	}
	
	//IntLiteral:
	//	val=INT;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//VariableReference:
	//	var=[VariableCharacter];
	public VariableReferenceElements getVariableReferenceAccess() {
		return pVariableReference;
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
