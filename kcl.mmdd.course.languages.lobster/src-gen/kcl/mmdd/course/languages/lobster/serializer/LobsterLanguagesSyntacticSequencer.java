/*
 * generated by Xtext 2.24.0
 */
package kcl.mmdd.course.languages.lobster.serializer;

import com.google.inject.Inject;
import java.util.List;
import kcl.mmdd.course.languages.lobster.services.LobsterLanguagesGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class LobsterLanguagesSyntacticSequencer extends AbstractSyntacticSequencer {

	protected LobsterLanguagesGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ConditionStatement_CommaKeyword_4_q;
	protected AbstractElementAlias match_CreateTableColumn_CommaKeyword_6_q;
	protected AbstractElementAlias match_InsertStatement_CommaKeyword_3_4_q;
	protected AbstractElementAlias match_SelectStatement_CommaKeyword_11_2_2_q;
	protected AbstractElementAlias match_SelectStatement___ColumnNameKeyword_11_2_0_CommaKeyword_11_2_2_q__a;
	protected AbstractElementAlias match_SelectStatement___CommaKeyword_11_2_2_q_ColumnNameKeyword_11_2_0__a;
	protected AbstractElementAlias match_SelectStatement___OrderByKeyword_11_0_LeftCurlyBracketKeyword_11_1___ColumnNameKeyword_11_2_0_CommaKeyword_11_2_2_q__a__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (LobsterLanguagesGrammarAccess) access;
		match_ConditionStatement_CommaKeyword_4_q = new TokenAlias(false, true, grammarAccess.getConditionStatementAccess().getCommaKeyword_4());
		match_CreateTableColumn_CommaKeyword_6_q = new TokenAlias(false, true, grammarAccess.getCreateTableColumnAccess().getCommaKeyword_6());
		match_InsertStatement_CommaKeyword_3_4_q = new TokenAlias(false, true, grammarAccess.getInsertStatementAccess().getCommaKeyword_3_4());
		match_SelectStatement_CommaKeyword_11_2_2_q = new TokenAlias(false, true, grammarAccess.getSelectStatementAccess().getCommaKeyword_11_2_2());
		match_SelectStatement___ColumnNameKeyword_11_2_0_CommaKeyword_11_2_2_q__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getSelectStatementAccess().getColumnNameKeyword_11_2_0()), new TokenAlias(false, true, grammarAccess.getSelectStatementAccess().getCommaKeyword_11_2_2()));
		match_SelectStatement___CommaKeyword_11_2_2_q_ColumnNameKeyword_11_2_0__a = new GroupAlias(true, true, new TokenAlias(false, true, grammarAccess.getSelectStatementAccess().getCommaKeyword_11_2_2()), new TokenAlias(false, false, grammarAccess.getSelectStatementAccess().getColumnNameKeyword_11_2_0()));
		match_SelectStatement___OrderByKeyword_11_0_LeftCurlyBracketKeyword_11_1___ColumnNameKeyword_11_2_0_CommaKeyword_11_2_2_q__a__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getSelectStatementAccess().getOrderByKeyword_11_0()), new TokenAlias(false, false, grammarAccess.getSelectStatementAccess().getLeftCurlyBracketKeyword_11_1()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getSelectStatementAccess().getColumnNameKeyword_11_2_0()), new TokenAlias(false, true, grammarAccess.getSelectStatementAccess().getCommaKeyword_11_2_2())));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ConditionStatement_CommaKeyword_4_q.equals(syntax))
				emit_ConditionStatement_CommaKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CreateTableColumn_CommaKeyword_6_q.equals(syntax))
				emit_CreateTableColumn_CommaKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_InsertStatement_CommaKeyword_3_4_q.equals(syntax))
				emit_InsertStatement_CommaKeyword_3_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SelectStatement_CommaKeyword_11_2_2_q.equals(syntax))
				emit_SelectStatement_CommaKeyword_11_2_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SelectStatement___ColumnNameKeyword_11_2_0_CommaKeyword_11_2_2_q__a.equals(syntax))
				emit_SelectStatement___ColumnNameKeyword_11_2_0_CommaKeyword_11_2_2_q__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SelectStatement___CommaKeyword_11_2_2_q_ColumnNameKeyword_11_2_0__a.equals(syntax))
				emit_SelectStatement___CommaKeyword_11_2_2_q_ColumnNameKeyword_11_2_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SelectStatement___OrderByKeyword_11_0_LeftCurlyBracketKeyword_11_1___ColumnNameKeyword_11_2_0_CommaKeyword_11_2_2_q__a__q.equals(syntax))
				emit_SelectStatement___OrderByKeyword_11_0_LeftCurlyBracketKeyword_11_1___ColumnNameKeyword_11_2_0_CommaKeyword_11_2_2_q__a__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     value=PrimaryExpression (ambiguity) (rule end)
	 */
	protected void emit_ConditionStatement_CommaKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     datatype=DataType 'type' (ambiguity) (rule end)
	 *     size=IntLiteral 'characters' ')' (ambiguity) (rule end)
	 */
	protected void emit_CreateTableColumn_CommaKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     value+=PrimaryExpression (ambiguity) 'Column Name:' column+=PrimaryExpression
	 *     value+=PrimaryExpression (ambiguity) '}' 'into' tbname=PrimaryExpression
	 */
	protected void emit_InsertStatement_CommaKeyword_3_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     condition1+=PrimaryExpression (ambiguity) ('Column Name:' (ambiguity))* 'sorted in' order=Order
	 *     condition1+=PrimaryExpression (ambiguity) ('Column Name:' (ambiguity))* '}' (rule end)
	 */
	protected void emit_SelectStatement_CommaKeyword_11_2_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('Column Name:' ','?)*
	 *
	 * This ambiguous syntax occurs at:
	 *     condition1+=PrimaryExpression ','? (ambiguity) 'sorted in' order=Order
	 *     condition1+=PrimaryExpression ','? (ambiguity) '}' (rule end)
	 */
	protected void emit_SelectStatement___ColumnNameKeyword_11_2_0_CommaKeyword_11_2_2_q__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (','? 'Column Name:')*
	 *
	 * This ambiguous syntax occurs at:
	 *     condition1+=PrimaryExpression (ambiguity) condition1+=PrimaryExpression
	 *     tbname=PrimaryExpression 'order by' '{' 'Column Name:' (ambiguity) condition1+=PrimaryExpression
	 */
	protected void emit_SelectStatement___CommaKeyword_11_2_2_q_ColumnNameKeyword_11_2_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('order by' '{' ('Column Name:' ','?)*)?
	 *
	 * This ambiguous syntax occurs at:
	 *     tbname=PrimaryExpression (ambiguity) 'sorted in' order=Order
	 *     tbname=PrimaryExpression (ambiguity) '}' (rule end)
	 */
	protected void emit_SelectStatement___OrderByKeyword_11_0_LeftCurlyBracketKeyword_11_1___ColumnNameKeyword_11_2_0_CommaKeyword_11_2_2_q__a__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
